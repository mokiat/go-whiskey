// Generated by 'github.com/mokiat/gostub'

package graphics_stubs

import (
	sync "sync"

	alias1 "github.com/mokiat/go-whiskey/graphics"
)

type Float3AttributeArrayStub struct {
	StubGUID        int
	SizeStub        func() (result1 int)
	sizeMutex       sync.RWMutex
	sizeArgsForCall []struct {
	}
	sizeReturns struct {
		result1 int
	}
	PutFloat3Stub        func(arg1 int, arg2 float32, arg3 float32, arg4 float32)
	putFloat3Mutex       sync.RWMutex
	putFloat3ArgsForCall []struct {
		arg1 int
		arg2 float32
		arg3 float32
		arg4 float32
	}
	Float3Stub        func(arg1 int) (result1 float32, result2 float32, result3 float32)
	float3Mutex       sync.RWMutex
	float3ArgsForCall []struct {
		arg1 int
	}
	float3Returns struct {
		result1 float32
		result2 float32
		result3 float32
	}
}

var _ alias1.Float3AttributeArray = new(Float3AttributeArrayStub)

func (stub *Float3AttributeArrayStub) Size() int {
	stub.sizeMutex.Lock()
	defer stub.sizeMutex.Unlock()
	stub.sizeArgsForCall = append(stub.sizeArgsForCall, struct {
	}{})
	if stub.SizeStub != nil {
		return stub.SizeStub()
	} else {
		return stub.sizeReturns.result1
	}
}
func (stub *Float3AttributeArrayStub) SizeCallCount() int {
	stub.sizeMutex.RLock()
	defer stub.sizeMutex.RUnlock()
	return len(stub.sizeArgsForCall)
}
func (stub *Float3AttributeArrayStub) SizeReturns(result1 int) {
	stub.sizeMutex.Lock()
	defer stub.sizeMutex.Unlock()
	stub.sizeReturns = struct {
		result1 int
	}{result1}
}
func (stub *Float3AttributeArrayStub) PutFloat3(arg1 int, arg2 float32, arg3 float32, arg4 float32) {
	stub.putFloat3Mutex.Lock()
	defer stub.putFloat3Mutex.Unlock()
	stub.putFloat3ArgsForCall = append(stub.putFloat3ArgsForCall, struct {
		arg1 int
		arg2 float32
		arg3 float32
		arg4 float32
	}{arg1, arg2, arg3, arg4})
	if stub.PutFloat3Stub != nil {
		stub.PutFloat3Stub(arg1, arg2, arg3, arg4)
	}
}
func (stub *Float3AttributeArrayStub) PutFloat3CallCount() int {
	stub.putFloat3Mutex.RLock()
	defer stub.putFloat3Mutex.RUnlock()
	return len(stub.putFloat3ArgsForCall)
}
func (stub *Float3AttributeArrayStub) PutFloat3ArgsForCall(index int) (int, float32, float32, float32) {
	stub.putFloat3Mutex.RLock()
	defer stub.putFloat3Mutex.RUnlock()
	return stub.putFloat3ArgsForCall[index].arg1, stub.putFloat3ArgsForCall[index].arg2, stub.putFloat3ArgsForCall[index].arg3, stub.putFloat3ArgsForCall[index].arg4
}
func (stub *Float3AttributeArrayStub) Float3(arg1 int) (float32, float32, float32) {
	stub.float3Mutex.Lock()
	defer stub.float3Mutex.Unlock()
	stub.float3ArgsForCall = append(stub.float3ArgsForCall, struct {
		arg1 int
	}{arg1})
	if stub.Float3Stub != nil {
		return stub.Float3Stub(arg1)
	} else {
		return stub.float3Returns.result1, stub.float3Returns.result2, stub.float3Returns.result3
	}
}
func (stub *Float3AttributeArrayStub) Float3CallCount() int {
	stub.float3Mutex.RLock()
	defer stub.float3Mutex.RUnlock()
	return len(stub.float3ArgsForCall)
}
func (stub *Float3AttributeArrayStub) Float3ArgsForCall(index int) int {
	stub.float3Mutex.RLock()
	defer stub.float3Mutex.RUnlock()
	return stub.float3ArgsForCall[index].arg1
}
func (stub *Float3AttributeArrayStub) Float3Returns(result1 float32, result2 float32, result3 float32) {
	stub.float3Mutex.Lock()
	defer stub.float3Mutex.Unlock()
	stub.float3Returns = struct {
		result1 float32
		result2 float32
		result3 float32
	}{result1, result2, result3}
}
