// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/momchil-atanasov/go-whiskey/common/buf"
	"github.com/momchil-atanasov/go-whiskey/graphics"
)

type FakeFacade struct {
	CreateBufferStub        func() graphics.ResourceId
	createBufferMutex       sync.RWMutex
	createBufferArgsForCall []struct{}
	createBufferReturns struct {
		result1 graphics.ResourceId
	}
	BindIndexBufferStub        func(bufferId graphics.ResourceId)
	bindIndexBufferMutex       sync.RWMutex
	bindIndexBufferArgsForCall []struct {
		bufferId graphics.ResourceId
	}
	CreateIndexBufferDataStub        func(data buf.UInt16Buffer, usage graphics.BufferUsage)
	createIndexBufferDataMutex       sync.RWMutex
	createIndexBufferDataArgsForCall []struct {
		data  buf.UInt16Buffer
		usage graphics.BufferUsage
	}
	BindVertexBufferStub        func(bufferId graphics.ResourceId)
	bindVertexBufferMutex       sync.RWMutex
	bindVertexBufferArgsForCall []struct {
		bufferId graphics.ResourceId
	}
	CreateVertexBufferDataStub        func(data buf.Float32Buffer, usage graphics.BufferUsage)
	createVertexBufferDataMutex       sync.RWMutex
	createVertexBufferDataArgsForCall []struct {
		data  buf.Float32Buffer
		usage graphics.BufferUsage
	}
	DeleteBufferStub        func(bufferId graphics.ResourceId)
	deleteBufferMutex       sync.RWMutex
	deleteBufferArgsForCall []struct {
		bufferId graphics.ResourceId
	}
	CreateVertexShaderStub        func() (graphics.ResourceId, error)
	createVertexShaderMutex       sync.RWMutex
	createVertexShaderArgsForCall []struct{}
	createVertexShaderReturns struct {
		result1 graphics.ResourceId
		result2 error
	}
	CreateFragmentShaderStub        func() (graphics.ResourceId, error)
	createFragmentShaderMutex       sync.RWMutex
	createFragmentShaderArgsForCall []struct{}
	createFragmentShaderReturns struct {
		result1 graphics.ResourceId
		result2 error
	}
	SetShaderSourceCodeStub        func(shaderId graphics.ResourceId, sourceCode string)
	setShaderSourceCodeMutex       sync.RWMutex
	setShaderSourceCodeArgsForCall []struct {
		shaderId   graphics.ResourceId
		sourceCode string
	}
	CompileShaderStub        func(shaderId graphics.ResourceId) error
	compileShaderMutex       sync.RWMutex
	compileShaderArgsForCall []struct {
		shaderId graphics.ResourceId
	}
	compileShaderReturns struct {
		result1 error
	}
	DeleteShaderStub        func(shaderId graphics.ResourceId)
	deleteShaderMutex       sync.RWMutex
	deleteShaderArgsForCall []struct {
		shaderId graphics.ResourceId
	}
	CreateProgramStub        func() (graphics.ResourceId, error)
	createProgramMutex       sync.RWMutex
	createProgramArgsForCall []struct{}
	createProgramReturns struct {
		result1 graphics.ResourceId
		result2 error
	}
	AttachShaderToProgramStub        func(programId graphics.ResourceId, shaderId graphics.ResourceId)
	attachShaderToProgramMutex       sync.RWMutex
	attachShaderToProgramArgsForCall []struct {
		programId graphics.ResourceId
		shaderId  graphics.ResourceId
	}
	LinkProgramStub        func(graphics.ResourceId) error
	linkProgramMutex       sync.RWMutex
	linkProgramArgsForCall []struct {
		arg1 graphics.ResourceId
	}
	linkProgramReturns struct {
		result1 error
	}
	UseProgramStub        func(graphics.ResourceId)
	useProgramMutex       sync.RWMutex
	useProgramArgsForCall []struct {
		arg1 graphics.ResourceId
	}
	DeleteProgramStub        func(graphics.ResourceId)
	deleteProgramMutex       sync.RWMutex
	deleteProgramArgsForCall []struct {
		arg1 graphics.ResourceId
	}
}

func (fake *FakeFacade) CreateBuffer() graphics.ResourceId {
	fake.createBufferMutex.Lock()
	fake.createBufferArgsForCall = append(fake.createBufferArgsForCall, struct{}{})
	fake.createBufferMutex.Unlock()
	if fake.CreateBufferStub != nil {
		return fake.CreateBufferStub()
	} else {
		return fake.createBufferReturns.result1
	}
}

func (fake *FakeFacade) CreateBufferCallCount() int {
	fake.createBufferMutex.RLock()
	defer fake.createBufferMutex.RUnlock()
	return len(fake.createBufferArgsForCall)
}

func (fake *FakeFacade) CreateBufferReturns(result1 graphics.ResourceId) {
	fake.CreateBufferStub = nil
	fake.createBufferReturns = struct {
		result1 graphics.ResourceId
	}{result1}
}

func (fake *FakeFacade) BindIndexBuffer(bufferId graphics.ResourceId) {
	fake.bindIndexBufferMutex.Lock()
	fake.bindIndexBufferArgsForCall = append(fake.bindIndexBufferArgsForCall, struct {
		bufferId graphics.ResourceId
	}{bufferId})
	fake.bindIndexBufferMutex.Unlock()
	if fake.BindIndexBufferStub != nil {
		fake.BindIndexBufferStub(bufferId)
	}
}

func (fake *FakeFacade) BindIndexBufferCallCount() int {
	fake.bindIndexBufferMutex.RLock()
	defer fake.bindIndexBufferMutex.RUnlock()
	return len(fake.bindIndexBufferArgsForCall)
}

func (fake *FakeFacade) BindIndexBufferArgsForCall(i int) graphics.ResourceId {
	fake.bindIndexBufferMutex.RLock()
	defer fake.bindIndexBufferMutex.RUnlock()
	return fake.bindIndexBufferArgsForCall[i].bufferId
}

func (fake *FakeFacade) CreateIndexBufferData(data buf.UInt16Buffer, usage graphics.BufferUsage) {
	fake.createIndexBufferDataMutex.Lock()
	fake.createIndexBufferDataArgsForCall = append(fake.createIndexBufferDataArgsForCall, struct {
		data  buf.UInt16Buffer
		usage graphics.BufferUsage
	}{data, usage})
	fake.createIndexBufferDataMutex.Unlock()
	if fake.CreateIndexBufferDataStub != nil {
		fake.CreateIndexBufferDataStub(data, usage)
	}
}

func (fake *FakeFacade) CreateIndexBufferDataCallCount() int {
	fake.createIndexBufferDataMutex.RLock()
	defer fake.createIndexBufferDataMutex.RUnlock()
	return len(fake.createIndexBufferDataArgsForCall)
}

func (fake *FakeFacade) CreateIndexBufferDataArgsForCall(i int) (buf.UInt16Buffer, graphics.BufferUsage) {
	fake.createIndexBufferDataMutex.RLock()
	defer fake.createIndexBufferDataMutex.RUnlock()
	return fake.createIndexBufferDataArgsForCall[i].data, fake.createIndexBufferDataArgsForCall[i].usage
}

func (fake *FakeFacade) BindVertexBuffer(bufferId graphics.ResourceId) {
	fake.bindVertexBufferMutex.Lock()
	fake.bindVertexBufferArgsForCall = append(fake.bindVertexBufferArgsForCall, struct {
		bufferId graphics.ResourceId
	}{bufferId})
	fake.bindVertexBufferMutex.Unlock()
	if fake.BindVertexBufferStub != nil {
		fake.BindVertexBufferStub(bufferId)
	}
}

func (fake *FakeFacade) BindVertexBufferCallCount() int {
	fake.bindVertexBufferMutex.RLock()
	defer fake.bindVertexBufferMutex.RUnlock()
	return len(fake.bindVertexBufferArgsForCall)
}

func (fake *FakeFacade) BindVertexBufferArgsForCall(i int) graphics.ResourceId {
	fake.bindVertexBufferMutex.RLock()
	defer fake.bindVertexBufferMutex.RUnlock()
	return fake.bindVertexBufferArgsForCall[i].bufferId
}

func (fake *FakeFacade) CreateVertexBufferData(data buf.Float32Buffer, usage graphics.BufferUsage) {
	fake.createVertexBufferDataMutex.Lock()
	fake.createVertexBufferDataArgsForCall = append(fake.createVertexBufferDataArgsForCall, struct {
		data  buf.Float32Buffer
		usage graphics.BufferUsage
	}{data, usage})
	fake.createVertexBufferDataMutex.Unlock()
	if fake.CreateVertexBufferDataStub != nil {
		fake.CreateVertexBufferDataStub(data, usage)
	}
}

func (fake *FakeFacade) CreateVertexBufferDataCallCount() int {
	fake.createVertexBufferDataMutex.RLock()
	defer fake.createVertexBufferDataMutex.RUnlock()
	return len(fake.createVertexBufferDataArgsForCall)
}

func (fake *FakeFacade) CreateVertexBufferDataArgsForCall(i int) (buf.Float32Buffer, graphics.BufferUsage) {
	fake.createVertexBufferDataMutex.RLock()
	defer fake.createVertexBufferDataMutex.RUnlock()
	return fake.createVertexBufferDataArgsForCall[i].data, fake.createVertexBufferDataArgsForCall[i].usage
}

func (fake *FakeFacade) DeleteBuffer(bufferId graphics.ResourceId) {
	fake.deleteBufferMutex.Lock()
	fake.deleteBufferArgsForCall = append(fake.deleteBufferArgsForCall, struct {
		bufferId graphics.ResourceId
	}{bufferId})
	fake.deleteBufferMutex.Unlock()
	if fake.DeleteBufferStub != nil {
		fake.DeleteBufferStub(bufferId)
	}
}

func (fake *FakeFacade) DeleteBufferCallCount() int {
	fake.deleteBufferMutex.RLock()
	defer fake.deleteBufferMutex.RUnlock()
	return len(fake.deleteBufferArgsForCall)
}

func (fake *FakeFacade) DeleteBufferArgsForCall(i int) graphics.ResourceId {
	fake.deleteBufferMutex.RLock()
	defer fake.deleteBufferMutex.RUnlock()
	return fake.deleteBufferArgsForCall[i].bufferId
}

func (fake *FakeFacade) CreateVertexShader() (graphics.ResourceId, error) {
	fake.createVertexShaderMutex.Lock()
	fake.createVertexShaderArgsForCall = append(fake.createVertexShaderArgsForCall, struct{}{})
	fake.createVertexShaderMutex.Unlock()
	if fake.CreateVertexShaderStub != nil {
		return fake.CreateVertexShaderStub()
	} else {
		return fake.createVertexShaderReturns.result1, fake.createVertexShaderReturns.result2
	}
}

func (fake *FakeFacade) CreateVertexShaderCallCount() int {
	fake.createVertexShaderMutex.RLock()
	defer fake.createVertexShaderMutex.RUnlock()
	return len(fake.createVertexShaderArgsForCall)
}

func (fake *FakeFacade) CreateVertexShaderReturns(result1 graphics.ResourceId, result2 error) {
	fake.CreateVertexShaderStub = nil
	fake.createVertexShaderReturns = struct {
		result1 graphics.ResourceId
		result2 error
	}{result1, result2}
}

func (fake *FakeFacade) CreateFragmentShader() (graphics.ResourceId, error) {
	fake.createFragmentShaderMutex.Lock()
	fake.createFragmentShaderArgsForCall = append(fake.createFragmentShaderArgsForCall, struct{}{})
	fake.createFragmentShaderMutex.Unlock()
	if fake.CreateFragmentShaderStub != nil {
		return fake.CreateFragmentShaderStub()
	} else {
		return fake.createFragmentShaderReturns.result1, fake.createFragmentShaderReturns.result2
	}
}

func (fake *FakeFacade) CreateFragmentShaderCallCount() int {
	fake.createFragmentShaderMutex.RLock()
	defer fake.createFragmentShaderMutex.RUnlock()
	return len(fake.createFragmentShaderArgsForCall)
}

func (fake *FakeFacade) CreateFragmentShaderReturns(result1 graphics.ResourceId, result2 error) {
	fake.CreateFragmentShaderStub = nil
	fake.createFragmentShaderReturns = struct {
		result1 graphics.ResourceId
		result2 error
	}{result1, result2}
}

func (fake *FakeFacade) SetShaderSourceCode(shaderId graphics.ResourceId, sourceCode string) {
	fake.setShaderSourceCodeMutex.Lock()
	fake.setShaderSourceCodeArgsForCall = append(fake.setShaderSourceCodeArgsForCall, struct {
		shaderId   graphics.ResourceId
		sourceCode string
	}{shaderId, sourceCode})
	fake.setShaderSourceCodeMutex.Unlock()
	if fake.SetShaderSourceCodeStub != nil {
		fake.SetShaderSourceCodeStub(shaderId, sourceCode)
	}
}

func (fake *FakeFacade) SetShaderSourceCodeCallCount() int {
	fake.setShaderSourceCodeMutex.RLock()
	defer fake.setShaderSourceCodeMutex.RUnlock()
	return len(fake.setShaderSourceCodeArgsForCall)
}

func (fake *FakeFacade) SetShaderSourceCodeArgsForCall(i int) (graphics.ResourceId, string) {
	fake.setShaderSourceCodeMutex.RLock()
	defer fake.setShaderSourceCodeMutex.RUnlock()
	return fake.setShaderSourceCodeArgsForCall[i].shaderId, fake.setShaderSourceCodeArgsForCall[i].sourceCode
}

func (fake *FakeFacade) CompileShader(shaderId graphics.ResourceId) error {
	fake.compileShaderMutex.Lock()
	fake.compileShaderArgsForCall = append(fake.compileShaderArgsForCall, struct {
		shaderId graphics.ResourceId
	}{shaderId})
	fake.compileShaderMutex.Unlock()
	if fake.CompileShaderStub != nil {
		return fake.CompileShaderStub(shaderId)
	} else {
		return fake.compileShaderReturns.result1
	}
}

func (fake *FakeFacade) CompileShaderCallCount() int {
	fake.compileShaderMutex.RLock()
	defer fake.compileShaderMutex.RUnlock()
	return len(fake.compileShaderArgsForCall)
}

func (fake *FakeFacade) CompileShaderArgsForCall(i int) graphics.ResourceId {
	fake.compileShaderMutex.RLock()
	defer fake.compileShaderMutex.RUnlock()
	return fake.compileShaderArgsForCall[i].shaderId
}

func (fake *FakeFacade) CompileShaderReturns(result1 error) {
	fake.CompileShaderStub = nil
	fake.compileShaderReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFacade) DeleteShader(shaderId graphics.ResourceId) {
	fake.deleteShaderMutex.Lock()
	fake.deleteShaderArgsForCall = append(fake.deleteShaderArgsForCall, struct {
		shaderId graphics.ResourceId
	}{shaderId})
	fake.deleteShaderMutex.Unlock()
	if fake.DeleteShaderStub != nil {
		fake.DeleteShaderStub(shaderId)
	}
}

func (fake *FakeFacade) DeleteShaderCallCount() int {
	fake.deleteShaderMutex.RLock()
	defer fake.deleteShaderMutex.RUnlock()
	return len(fake.deleteShaderArgsForCall)
}

func (fake *FakeFacade) DeleteShaderArgsForCall(i int) graphics.ResourceId {
	fake.deleteShaderMutex.RLock()
	defer fake.deleteShaderMutex.RUnlock()
	return fake.deleteShaderArgsForCall[i].shaderId
}

func (fake *FakeFacade) CreateProgram() (graphics.ResourceId, error) {
	fake.createProgramMutex.Lock()
	fake.createProgramArgsForCall = append(fake.createProgramArgsForCall, struct{}{})
	fake.createProgramMutex.Unlock()
	if fake.CreateProgramStub != nil {
		return fake.CreateProgramStub()
	} else {
		return fake.createProgramReturns.result1, fake.createProgramReturns.result2
	}
}

func (fake *FakeFacade) CreateProgramCallCount() int {
	fake.createProgramMutex.RLock()
	defer fake.createProgramMutex.RUnlock()
	return len(fake.createProgramArgsForCall)
}

func (fake *FakeFacade) CreateProgramReturns(result1 graphics.ResourceId, result2 error) {
	fake.CreateProgramStub = nil
	fake.createProgramReturns = struct {
		result1 graphics.ResourceId
		result2 error
	}{result1, result2}
}

func (fake *FakeFacade) AttachShaderToProgram(programId graphics.ResourceId, shaderId graphics.ResourceId) {
	fake.attachShaderToProgramMutex.Lock()
	fake.attachShaderToProgramArgsForCall = append(fake.attachShaderToProgramArgsForCall, struct {
		programId graphics.ResourceId
		shaderId  graphics.ResourceId
	}{programId, shaderId})
	fake.attachShaderToProgramMutex.Unlock()
	if fake.AttachShaderToProgramStub != nil {
		fake.AttachShaderToProgramStub(programId, shaderId)
	}
}

func (fake *FakeFacade) AttachShaderToProgramCallCount() int {
	fake.attachShaderToProgramMutex.RLock()
	defer fake.attachShaderToProgramMutex.RUnlock()
	return len(fake.attachShaderToProgramArgsForCall)
}

func (fake *FakeFacade) AttachShaderToProgramArgsForCall(i int) (graphics.ResourceId, graphics.ResourceId) {
	fake.attachShaderToProgramMutex.RLock()
	defer fake.attachShaderToProgramMutex.RUnlock()
	return fake.attachShaderToProgramArgsForCall[i].programId, fake.attachShaderToProgramArgsForCall[i].shaderId
}

func (fake *FakeFacade) LinkProgram(arg1 graphics.ResourceId) error {
	fake.linkProgramMutex.Lock()
	fake.linkProgramArgsForCall = append(fake.linkProgramArgsForCall, struct {
		arg1 graphics.ResourceId
	}{arg1})
	fake.linkProgramMutex.Unlock()
	if fake.LinkProgramStub != nil {
		return fake.LinkProgramStub(arg1)
	} else {
		return fake.linkProgramReturns.result1
	}
}

func (fake *FakeFacade) LinkProgramCallCount() int {
	fake.linkProgramMutex.RLock()
	defer fake.linkProgramMutex.RUnlock()
	return len(fake.linkProgramArgsForCall)
}

func (fake *FakeFacade) LinkProgramArgsForCall(i int) graphics.ResourceId {
	fake.linkProgramMutex.RLock()
	defer fake.linkProgramMutex.RUnlock()
	return fake.linkProgramArgsForCall[i].arg1
}

func (fake *FakeFacade) LinkProgramReturns(result1 error) {
	fake.LinkProgramStub = nil
	fake.linkProgramReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFacade) UseProgram(arg1 graphics.ResourceId) {
	fake.useProgramMutex.Lock()
	fake.useProgramArgsForCall = append(fake.useProgramArgsForCall, struct {
		arg1 graphics.ResourceId
	}{arg1})
	fake.useProgramMutex.Unlock()
	if fake.UseProgramStub != nil {
		fake.UseProgramStub(arg1)
	}
}

func (fake *FakeFacade) UseProgramCallCount() int {
	fake.useProgramMutex.RLock()
	defer fake.useProgramMutex.RUnlock()
	return len(fake.useProgramArgsForCall)
}

func (fake *FakeFacade) UseProgramArgsForCall(i int) graphics.ResourceId {
	fake.useProgramMutex.RLock()
	defer fake.useProgramMutex.RUnlock()
	return fake.useProgramArgsForCall[i].arg1
}

func (fake *FakeFacade) DeleteProgram(arg1 graphics.ResourceId) {
	fake.deleteProgramMutex.Lock()
	fake.deleteProgramArgsForCall = append(fake.deleteProgramArgsForCall, struct {
		arg1 graphics.ResourceId
	}{arg1})
	fake.deleteProgramMutex.Unlock()
	if fake.DeleteProgramStub != nil {
		fake.DeleteProgramStub(arg1)
	}
}

func (fake *FakeFacade) DeleteProgramCallCount() int {
	fake.deleteProgramMutex.RLock()
	defer fake.deleteProgramMutex.RUnlock()
	return len(fake.deleteProgramArgsForCall)
}

func (fake *FakeFacade) DeleteProgramArgsForCall(i int) graphics.ResourceId {
	fake.deleteProgramMutex.RLock()
	defer fake.deleteProgramMutex.RUnlock()
	return fake.deleteProgramArgsForCall[i].arg1
}

var _ graphics.Facade = new(FakeFacade)
