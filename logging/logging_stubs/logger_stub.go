// Generated by 'github.com/mokiat/gostub'

package logging_stubs

import (
	sync "sync"

	alias1 "github.com/mokiat/go-whiskey/logging"
)

type LoggerStub struct {
	StubGUID          int
	PrintfStub        func(arg1 string, arg2 ...interface{})
	printfMutex       sync.RWMutex
	printfArgsForCall []struct {
		arg1 string
		arg2 []interface{}
	}
}

var _ alias1.Logger = new(LoggerStub)

func (stub *LoggerStub) Printf(arg1 string, arg2 ...interface{}) {
	stub.printfMutex.Lock()
	defer stub.printfMutex.Unlock()
	stub.printfArgsForCall = append(stub.printfArgsForCall, struct {
		arg1 string
		arg2 []interface{}
	}{arg1, arg2})
	if stub.PrintfStub != nil {
		stub.PrintfStub(arg1, arg2...)
	}
}
func (stub *LoggerStub) PrintfCallCount() int {
	stub.printfMutex.RLock()
	defer stub.printfMutex.RUnlock()
	return len(stub.printfArgsForCall)
}
func (stub *LoggerStub) PrintfArgsForCall(index int) (string, []interface{}) {
	stub.printfMutex.RLock()
	defer stub.printfMutex.RUnlock()
	return stub.printfArgsForCall[index].arg1, stub.printfArgsForCall[index].arg2
}
