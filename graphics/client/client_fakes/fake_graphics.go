// This file was generated by counterfeiter
package client_fakes

import (
	"sync"

	"github.com/momchil-atanasov/go-whiskey/graphics/client"
	"github.com/momchil-atanasov/go-whiskey/math"
)

type FakeGraphicsClient struct {
	CreateVertexShaderStub        func() (client.ShaderId, error)
	createVertexShaderMutex       sync.RWMutex
	createVertexShaderArgsForCall []struct{}
	createVertexShaderReturns struct {
		result1 client.ShaderId
		result2 error
	}
	CreateFragmentShaderStub        func() (client.ShaderId, error)
	createFragmentShaderMutex       sync.RWMutex
	createFragmentShaderArgsForCall []struct{}
	createFragmentShaderReturns struct {
		result1 client.ShaderId
		result2 error
	}
	SetShaderSourceCodeStub        func(id client.ShaderId, sourceCode string) error
	setShaderSourceCodeMutex       sync.RWMutex
	setShaderSourceCodeArgsForCall []struct {
		id         client.ShaderId
		sourceCode string
	}
	setShaderSourceCodeReturns struct {
		result1 error
	}
	CompileShaderStub        func(id client.ShaderId) error
	compileShaderMutex       sync.RWMutex
	compileShaderArgsForCall []struct {
		id client.ShaderId
	}
	compileShaderReturns struct {
		result1 error
	}
	DeleteShaderStub        func(id client.ShaderId) error
	deleteShaderMutex       sync.RWMutex
	deleteShaderArgsForCall []struct {
		id client.ShaderId
	}
	deleteShaderReturns struct {
		result1 error
	}
	CreateProgramStub        func() (client.ProgramId, error)
	createProgramMutex       sync.RWMutex
	createProgramArgsForCall []struct{}
	createProgramReturns struct {
		result1 client.ProgramId
		result2 error
	}
	AttachShaderToProgramStub        func(shaderId client.ShaderId, programId client.ProgramId) error
	attachShaderToProgramMutex       sync.RWMutex
	attachShaderToProgramArgsForCall []struct {
		shaderId  client.ShaderId
		programId client.ProgramId
	}
	attachShaderToProgramReturns struct {
		result1 error
	}
	LinkProgramStub        func(client.ProgramId) error
	linkProgramMutex       sync.RWMutex
	linkProgramArgsForCall []struct {
		arg1 client.ProgramId
	}
	linkProgramReturns struct {
		result1 error
	}
	UseProgramStub        func(client.ProgramId) error
	useProgramMutex       sync.RWMutex
	useProgramArgsForCall []struct {
		arg1 client.ProgramId
	}
	useProgramReturns struct {
		result1 error
	}
	DeleteProgramStub        func(client.ProgramId) error
	deleteProgramMutex       sync.RWMutex
	deleteProgramArgsForCall []struct {
		arg1 client.ProgramId
	}
	deleteProgramReturns struct {
		result1 error
	}
	BindVertexBufferStub        func(id client.BufferId) error
	bindVertexBufferMutex       sync.RWMutex
	bindVertexBufferArgsForCall []struct {
		id client.BufferId
	}
	bindVertexBufferReturns struct {
		result1 error
	}
	BindIndexBufferStub        func(id client.BufferId) error
	bindIndexBufferMutex       sync.RWMutex
	bindIndexBufferArgsForCall []struct {
		id client.BufferId
	}
	bindIndexBufferReturns struct {
		result1 error
	}
	EnableAttributeStub        func(location client.AttributeLocation) error
	enableAttributeMutex       sync.RWMutex
	enableAttributeArgsForCall []struct {
		location client.AttributeLocation
	}
	enableAttributeReturns struct {
		result1 error
	}
	DisableAttributeStub        func(location client.AttributeLocation) error
	disableAttributeMutex       sync.RWMutex
	disableAttributeArgsForCall []struct {
		location client.AttributeLocation
	}
	disableAttributeReturns struct {
		result1 error
	}
	ConfigureAttributeStub        func(location client.AttributeLocation, components, strideInBytes, offsetInBytes int) error
	configureAttributeMutex       sync.RWMutex
	configureAttributeArgsForCall []struct {
		location      client.AttributeLocation
		components    int
		strideInBytes int
		offsetInBytes int
	}
	configureAttributeReturns struct {
		result1 error
	}
	BindVec4UniformStub        func(client.UniformLocation, math.Vec4) error
	bindVec4UniformMutex       sync.RWMutex
	bindVec4UniformArgsForCall []struct {
		arg1 client.UniformLocation
		arg2 math.Vec4
	}
	bindVec4UniformReturns struct {
		result1 error
	}
	BindMat4x4UniformStub        func(client.UniformLocation, math.Mat4x4) error
	bindMat4x4UniformMutex       sync.RWMutex
	bindMat4x4UniformArgsForCall []struct {
		arg1 client.UniformLocation
		arg2 math.Mat4x4
	}
	bindMat4x4UniformReturns struct {
		result1 error
	}
	DrawTrianglesStub        func(indexCount, indexOffsetInBytes int) error
	drawTrianglesMutex       sync.RWMutex
	drawTrianglesArgsForCall []struct {
		indexCount         int
		indexOffsetInBytes int
	}
	drawTrianglesReturns struct {
		result1 error
	}
}

func (fake *FakeGraphicsClient) CreateVertexShader() (client.ShaderId, error) {
	fake.createVertexShaderMutex.Lock()
	fake.createVertexShaderArgsForCall = append(fake.createVertexShaderArgsForCall, struct{}{})
	fake.createVertexShaderMutex.Unlock()
	if fake.CreateVertexShaderStub != nil {
		return fake.CreateVertexShaderStub()
	} else {
		return fake.createVertexShaderReturns.result1, fake.createVertexShaderReturns.result2
	}
}

func (fake *FakeGraphicsClient) CreateVertexShaderCallCount() int {
	fake.createVertexShaderMutex.RLock()
	defer fake.createVertexShaderMutex.RUnlock()
	return len(fake.createVertexShaderArgsForCall)
}

func (fake *FakeGraphicsClient) CreateVertexShaderReturns(result1 client.ShaderId, result2 error) {
	fake.CreateVertexShaderStub = nil
	fake.createVertexShaderReturns = struct {
		result1 client.ShaderId
		result2 error
	}{result1, result2}
}

func (fake *FakeGraphicsClient) CreateFragmentShader() (client.ShaderId, error) {
	fake.createFragmentShaderMutex.Lock()
	fake.createFragmentShaderArgsForCall = append(fake.createFragmentShaderArgsForCall, struct{}{})
	fake.createFragmentShaderMutex.Unlock()
	if fake.CreateFragmentShaderStub != nil {
		return fake.CreateFragmentShaderStub()
	} else {
		return fake.createFragmentShaderReturns.result1, fake.createFragmentShaderReturns.result2
	}
}

func (fake *FakeGraphicsClient) CreateFragmentShaderCallCount() int {
	fake.createFragmentShaderMutex.RLock()
	defer fake.createFragmentShaderMutex.RUnlock()
	return len(fake.createFragmentShaderArgsForCall)
}

func (fake *FakeGraphicsClient) CreateFragmentShaderReturns(result1 client.ShaderId, result2 error) {
	fake.CreateFragmentShaderStub = nil
	fake.createFragmentShaderReturns = struct {
		result1 client.ShaderId
		result2 error
	}{result1, result2}
}

func (fake *FakeGraphicsClient) SetShaderSourceCode(id client.ShaderId, sourceCode string) error {
	fake.setShaderSourceCodeMutex.Lock()
	fake.setShaderSourceCodeArgsForCall = append(fake.setShaderSourceCodeArgsForCall, struct {
		id         client.ShaderId
		sourceCode string
	}{id, sourceCode})
	fake.setShaderSourceCodeMutex.Unlock()
	if fake.SetShaderSourceCodeStub != nil {
		return fake.SetShaderSourceCodeStub(id, sourceCode)
	} else {
		return fake.setShaderSourceCodeReturns.result1
	}
}

func (fake *FakeGraphicsClient) SetShaderSourceCodeCallCount() int {
	fake.setShaderSourceCodeMutex.RLock()
	defer fake.setShaderSourceCodeMutex.RUnlock()
	return len(fake.setShaderSourceCodeArgsForCall)
}

func (fake *FakeGraphicsClient) SetShaderSourceCodeArgsForCall(i int) (client.ShaderId, string) {
	fake.setShaderSourceCodeMutex.RLock()
	defer fake.setShaderSourceCodeMutex.RUnlock()
	return fake.setShaderSourceCodeArgsForCall[i].id, fake.setShaderSourceCodeArgsForCall[i].sourceCode
}

func (fake *FakeGraphicsClient) SetShaderSourceCodeReturns(result1 error) {
	fake.SetShaderSourceCodeStub = nil
	fake.setShaderSourceCodeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGraphicsClient) CompileShader(id client.ShaderId) error {
	fake.compileShaderMutex.Lock()
	fake.compileShaderArgsForCall = append(fake.compileShaderArgsForCall, struct {
		id client.ShaderId
	}{id})
	fake.compileShaderMutex.Unlock()
	if fake.CompileShaderStub != nil {
		return fake.CompileShaderStub(id)
	} else {
		return fake.compileShaderReturns.result1
	}
}

func (fake *FakeGraphicsClient) CompileShaderCallCount() int {
	fake.compileShaderMutex.RLock()
	defer fake.compileShaderMutex.RUnlock()
	return len(fake.compileShaderArgsForCall)
}

func (fake *FakeGraphicsClient) CompileShaderArgsForCall(i int) client.ShaderId {
	fake.compileShaderMutex.RLock()
	defer fake.compileShaderMutex.RUnlock()
	return fake.compileShaderArgsForCall[i].id
}

func (fake *FakeGraphicsClient) CompileShaderReturns(result1 error) {
	fake.CompileShaderStub = nil
	fake.compileShaderReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGraphicsClient) DeleteShader(id client.ShaderId) error {
	fake.deleteShaderMutex.Lock()
	fake.deleteShaderArgsForCall = append(fake.deleteShaderArgsForCall, struct {
		id client.ShaderId
	}{id})
	fake.deleteShaderMutex.Unlock()
	if fake.DeleteShaderStub != nil {
		return fake.DeleteShaderStub(id)
	} else {
		return fake.deleteShaderReturns.result1
	}
}

func (fake *FakeGraphicsClient) DeleteShaderCallCount() int {
	fake.deleteShaderMutex.RLock()
	defer fake.deleteShaderMutex.RUnlock()
	return len(fake.deleteShaderArgsForCall)
}

func (fake *FakeGraphicsClient) DeleteShaderArgsForCall(i int) client.ShaderId {
	fake.deleteShaderMutex.RLock()
	defer fake.deleteShaderMutex.RUnlock()
	return fake.deleteShaderArgsForCall[i].id
}

func (fake *FakeGraphicsClient) DeleteShaderReturns(result1 error) {
	fake.DeleteShaderStub = nil
	fake.deleteShaderReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGraphicsClient) CreateProgram() (client.ProgramId, error) {
	fake.createProgramMutex.Lock()
	fake.createProgramArgsForCall = append(fake.createProgramArgsForCall, struct{}{})
	fake.createProgramMutex.Unlock()
	if fake.CreateProgramStub != nil {
		return fake.CreateProgramStub()
	} else {
		return fake.createProgramReturns.result1, fake.createProgramReturns.result2
	}
}

func (fake *FakeGraphicsClient) CreateProgramCallCount() int {
	fake.createProgramMutex.RLock()
	defer fake.createProgramMutex.RUnlock()
	return len(fake.createProgramArgsForCall)
}

func (fake *FakeGraphicsClient) CreateProgramReturns(result1 client.ProgramId, result2 error) {
	fake.CreateProgramStub = nil
	fake.createProgramReturns = struct {
		result1 client.ProgramId
		result2 error
	}{result1, result2}
}

func (fake *FakeGraphicsClient) AttachShaderToProgram(shaderId client.ShaderId, programId client.ProgramId) error {
	fake.attachShaderToProgramMutex.Lock()
	fake.attachShaderToProgramArgsForCall = append(fake.attachShaderToProgramArgsForCall, struct {
		shaderId  client.ShaderId
		programId client.ProgramId
	}{shaderId, programId})
	fake.attachShaderToProgramMutex.Unlock()
	if fake.AttachShaderToProgramStub != nil {
		return fake.AttachShaderToProgramStub(shaderId, programId)
	} else {
		return fake.attachShaderToProgramReturns.result1
	}
}

func (fake *FakeGraphicsClient) AttachShaderToProgramCallCount() int {
	fake.attachShaderToProgramMutex.RLock()
	defer fake.attachShaderToProgramMutex.RUnlock()
	return len(fake.attachShaderToProgramArgsForCall)
}

func (fake *FakeGraphicsClient) AttachShaderToProgramArgsForCall(i int) (client.ShaderId, client.ProgramId) {
	fake.attachShaderToProgramMutex.RLock()
	defer fake.attachShaderToProgramMutex.RUnlock()
	return fake.attachShaderToProgramArgsForCall[i].shaderId, fake.attachShaderToProgramArgsForCall[i].programId
}

func (fake *FakeGraphicsClient) AttachShaderToProgramReturns(result1 error) {
	fake.AttachShaderToProgramStub = nil
	fake.attachShaderToProgramReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGraphicsClient) LinkProgram(arg1 client.ProgramId) error {
	fake.linkProgramMutex.Lock()
	fake.linkProgramArgsForCall = append(fake.linkProgramArgsForCall, struct {
		arg1 client.ProgramId
	}{arg1})
	fake.linkProgramMutex.Unlock()
	if fake.LinkProgramStub != nil {
		return fake.LinkProgramStub(arg1)
	} else {
		return fake.linkProgramReturns.result1
	}
}

func (fake *FakeGraphicsClient) LinkProgramCallCount() int {
	fake.linkProgramMutex.RLock()
	defer fake.linkProgramMutex.RUnlock()
	return len(fake.linkProgramArgsForCall)
}

func (fake *FakeGraphicsClient) LinkProgramArgsForCall(i int) client.ProgramId {
	fake.linkProgramMutex.RLock()
	defer fake.linkProgramMutex.RUnlock()
	return fake.linkProgramArgsForCall[i].arg1
}

func (fake *FakeGraphicsClient) LinkProgramReturns(result1 error) {
	fake.LinkProgramStub = nil
	fake.linkProgramReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGraphicsClient) UseProgram(arg1 client.ProgramId) error {
	fake.useProgramMutex.Lock()
	fake.useProgramArgsForCall = append(fake.useProgramArgsForCall, struct {
		arg1 client.ProgramId
	}{arg1})
	fake.useProgramMutex.Unlock()
	if fake.UseProgramStub != nil {
		return fake.UseProgramStub(arg1)
	} else {
		return fake.useProgramReturns.result1
	}
}

func (fake *FakeGraphicsClient) UseProgramCallCount() int {
	fake.useProgramMutex.RLock()
	defer fake.useProgramMutex.RUnlock()
	return len(fake.useProgramArgsForCall)
}

func (fake *FakeGraphicsClient) UseProgramArgsForCall(i int) client.ProgramId {
	fake.useProgramMutex.RLock()
	defer fake.useProgramMutex.RUnlock()
	return fake.useProgramArgsForCall[i].arg1
}

func (fake *FakeGraphicsClient) UseProgramReturns(result1 error) {
	fake.UseProgramStub = nil
	fake.useProgramReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGraphicsClient) DeleteProgram(arg1 client.ProgramId) error {
	fake.deleteProgramMutex.Lock()
	fake.deleteProgramArgsForCall = append(fake.deleteProgramArgsForCall, struct {
		arg1 client.ProgramId
	}{arg1})
	fake.deleteProgramMutex.Unlock()
	if fake.DeleteProgramStub != nil {
		return fake.DeleteProgramStub(arg1)
	} else {
		return fake.deleteProgramReturns.result1
	}
}

func (fake *FakeGraphicsClient) DeleteProgramCallCount() int {
	fake.deleteProgramMutex.RLock()
	defer fake.deleteProgramMutex.RUnlock()
	return len(fake.deleteProgramArgsForCall)
}

func (fake *FakeGraphicsClient) DeleteProgramArgsForCall(i int) client.ProgramId {
	fake.deleteProgramMutex.RLock()
	defer fake.deleteProgramMutex.RUnlock()
	return fake.deleteProgramArgsForCall[i].arg1
}

func (fake *FakeGraphicsClient) DeleteProgramReturns(result1 error) {
	fake.DeleteProgramStub = nil
	fake.deleteProgramReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGraphicsClient) BindVertexBuffer(id client.BufferId) error {
	fake.bindVertexBufferMutex.Lock()
	fake.bindVertexBufferArgsForCall = append(fake.bindVertexBufferArgsForCall, struct {
		id client.BufferId
	}{id})
	fake.bindVertexBufferMutex.Unlock()
	if fake.BindVertexBufferStub != nil {
		return fake.BindVertexBufferStub(id)
	} else {
		return fake.bindVertexBufferReturns.result1
	}
}

func (fake *FakeGraphicsClient) BindVertexBufferCallCount() int {
	fake.bindVertexBufferMutex.RLock()
	defer fake.bindVertexBufferMutex.RUnlock()
	return len(fake.bindVertexBufferArgsForCall)
}

func (fake *FakeGraphicsClient) BindVertexBufferArgsForCall(i int) client.BufferId {
	fake.bindVertexBufferMutex.RLock()
	defer fake.bindVertexBufferMutex.RUnlock()
	return fake.bindVertexBufferArgsForCall[i].id
}

func (fake *FakeGraphicsClient) BindVertexBufferReturns(result1 error) {
	fake.BindVertexBufferStub = nil
	fake.bindVertexBufferReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGraphicsClient) BindIndexBuffer(id client.BufferId) error {
	fake.bindIndexBufferMutex.Lock()
	fake.bindIndexBufferArgsForCall = append(fake.bindIndexBufferArgsForCall, struct {
		id client.BufferId
	}{id})
	fake.bindIndexBufferMutex.Unlock()
	if fake.BindIndexBufferStub != nil {
		return fake.BindIndexBufferStub(id)
	} else {
		return fake.bindIndexBufferReturns.result1
	}
}

func (fake *FakeGraphicsClient) BindIndexBufferCallCount() int {
	fake.bindIndexBufferMutex.RLock()
	defer fake.bindIndexBufferMutex.RUnlock()
	return len(fake.bindIndexBufferArgsForCall)
}

func (fake *FakeGraphicsClient) BindIndexBufferArgsForCall(i int) client.BufferId {
	fake.bindIndexBufferMutex.RLock()
	defer fake.bindIndexBufferMutex.RUnlock()
	return fake.bindIndexBufferArgsForCall[i].id
}

func (fake *FakeGraphicsClient) BindIndexBufferReturns(result1 error) {
	fake.BindIndexBufferStub = nil
	fake.bindIndexBufferReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGraphicsClient) EnableAttribute(location client.AttributeLocation) error {
	fake.enableAttributeMutex.Lock()
	fake.enableAttributeArgsForCall = append(fake.enableAttributeArgsForCall, struct {
		location client.AttributeLocation
	}{location})
	fake.enableAttributeMutex.Unlock()
	if fake.EnableAttributeStub != nil {
		return fake.EnableAttributeStub(location)
	} else {
		return fake.enableAttributeReturns.result1
	}
}

func (fake *FakeGraphicsClient) EnableAttributeCallCount() int {
	fake.enableAttributeMutex.RLock()
	defer fake.enableAttributeMutex.RUnlock()
	return len(fake.enableAttributeArgsForCall)
}

func (fake *FakeGraphicsClient) EnableAttributeArgsForCall(i int) client.AttributeLocation {
	fake.enableAttributeMutex.RLock()
	defer fake.enableAttributeMutex.RUnlock()
	return fake.enableAttributeArgsForCall[i].location
}

func (fake *FakeGraphicsClient) EnableAttributeReturns(result1 error) {
	fake.EnableAttributeStub = nil
	fake.enableAttributeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGraphicsClient) DisableAttribute(location client.AttributeLocation) error {
	fake.disableAttributeMutex.Lock()
	fake.disableAttributeArgsForCall = append(fake.disableAttributeArgsForCall, struct {
		location client.AttributeLocation
	}{location})
	fake.disableAttributeMutex.Unlock()
	if fake.DisableAttributeStub != nil {
		return fake.DisableAttributeStub(location)
	} else {
		return fake.disableAttributeReturns.result1
	}
}

func (fake *FakeGraphicsClient) DisableAttributeCallCount() int {
	fake.disableAttributeMutex.RLock()
	defer fake.disableAttributeMutex.RUnlock()
	return len(fake.disableAttributeArgsForCall)
}

func (fake *FakeGraphicsClient) DisableAttributeArgsForCall(i int) client.AttributeLocation {
	fake.disableAttributeMutex.RLock()
	defer fake.disableAttributeMutex.RUnlock()
	return fake.disableAttributeArgsForCall[i].location
}

func (fake *FakeGraphicsClient) DisableAttributeReturns(result1 error) {
	fake.DisableAttributeStub = nil
	fake.disableAttributeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGraphicsClient) ConfigureAttribute(location client.AttributeLocation, components int, strideInBytes int, offsetInBytes int) error {
	fake.configureAttributeMutex.Lock()
	fake.configureAttributeArgsForCall = append(fake.configureAttributeArgsForCall, struct {
		location      client.AttributeLocation
		components    int
		strideInBytes int
		offsetInBytes int
	}{location, components, strideInBytes, offsetInBytes})
	fake.configureAttributeMutex.Unlock()
	if fake.ConfigureAttributeStub != nil {
		return fake.ConfigureAttributeStub(location, components, strideInBytes, offsetInBytes)
	} else {
		return fake.configureAttributeReturns.result1
	}
}

func (fake *FakeGraphicsClient) ConfigureAttributeCallCount() int {
	fake.configureAttributeMutex.RLock()
	defer fake.configureAttributeMutex.RUnlock()
	return len(fake.configureAttributeArgsForCall)
}

func (fake *FakeGraphicsClient) ConfigureAttributeArgsForCall(i int) (client.AttributeLocation, int, int, int) {
	fake.configureAttributeMutex.RLock()
	defer fake.configureAttributeMutex.RUnlock()
	return fake.configureAttributeArgsForCall[i].location, fake.configureAttributeArgsForCall[i].components, fake.configureAttributeArgsForCall[i].strideInBytes, fake.configureAttributeArgsForCall[i].offsetInBytes
}

func (fake *FakeGraphicsClient) ConfigureAttributeReturns(result1 error) {
	fake.ConfigureAttributeStub = nil
	fake.configureAttributeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGraphicsClient) BindVec4Uniform(arg1 client.UniformLocation, arg2 math.Vec4) error {
	fake.bindVec4UniformMutex.Lock()
	fake.bindVec4UniformArgsForCall = append(fake.bindVec4UniformArgsForCall, struct {
		arg1 client.UniformLocation
		arg2 math.Vec4
	}{arg1, arg2})
	fake.bindVec4UniformMutex.Unlock()
	if fake.BindVec4UniformStub != nil {
		return fake.BindVec4UniformStub(arg1, arg2)
	} else {
		return fake.bindVec4UniformReturns.result1
	}
}

func (fake *FakeGraphicsClient) BindVec4UniformCallCount() int {
	fake.bindVec4UniformMutex.RLock()
	defer fake.bindVec4UniformMutex.RUnlock()
	return len(fake.bindVec4UniformArgsForCall)
}

func (fake *FakeGraphicsClient) BindVec4UniformArgsForCall(i int) (client.UniformLocation, math.Vec4) {
	fake.bindVec4UniformMutex.RLock()
	defer fake.bindVec4UniformMutex.RUnlock()
	return fake.bindVec4UniformArgsForCall[i].arg1, fake.bindVec4UniformArgsForCall[i].arg2
}

func (fake *FakeGraphicsClient) BindVec4UniformReturns(result1 error) {
	fake.BindVec4UniformStub = nil
	fake.bindVec4UniformReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGraphicsClient) BindMat4x4Uniform(arg1 client.UniformLocation, arg2 math.Mat4x4) error {
	fake.bindMat4x4UniformMutex.Lock()
	fake.bindMat4x4UniformArgsForCall = append(fake.bindMat4x4UniformArgsForCall, struct {
		arg1 client.UniformLocation
		arg2 math.Mat4x4
	}{arg1, arg2})
	fake.bindMat4x4UniformMutex.Unlock()
	if fake.BindMat4x4UniformStub != nil {
		return fake.BindMat4x4UniformStub(arg1, arg2)
	} else {
		return fake.bindMat4x4UniformReturns.result1
	}
}

func (fake *FakeGraphicsClient) BindMat4x4UniformCallCount() int {
	fake.bindMat4x4UniformMutex.RLock()
	defer fake.bindMat4x4UniformMutex.RUnlock()
	return len(fake.bindMat4x4UniformArgsForCall)
}

func (fake *FakeGraphicsClient) BindMat4x4UniformArgsForCall(i int) (client.UniformLocation, math.Mat4x4) {
	fake.bindMat4x4UniformMutex.RLock()
	defer fake.bindMat4x4UniformMutex.RUnlock()
	return fake.bindMat4x4UniformArgsForCall[i].arg1, fake.bindMat4x4UniformArgsForCall[i].arg2
}

func (fake *FakeGraphicsClient) BindMat4x4UniformReturns(result1 error) {
	fake.BindMat4x4UniformStub = nil
	fake.bindMat4x4UniformReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGraphicsClient) DrawTriangles(indexCount int, indexOffsetInBytes int) error {
	fake.drawTrianglesMutex.Lock()
	fake.drawTrianglesArgsForCall = append(fake.drawTrianglesArgsForCall, struct {
		indexCount         int
		indexOffsetInBytes int
	}{indexCount, indexOffsetInBytes})
	fake.drawTrianglesMutex.Unlock()
	if fake.DrawTrianglesStub != nil {
		return fake.DrawTrianglesStub(indexCount, indexOffsetInBytes)
	} else {
		return fake.drawTrianglesReturns.result1
	}
}

func (fake *FakeGraphicsClient) DrawTrianglesCallCount() int {
	fake.drawTrianglesMutex.RLock()
	defer fake.drawTrianglesMutex.RUnlock()
	return len(fake.drawTrianglesArgsForCall)
}

func (fake *FakeGraphicsClient) DrawTrianglesArgsForCall(i int) (int, int) {
	fake.drawTrianglesMutex.RLock()
	defer fake.drawTrianglesMutex.RUnlock()
	return fake.drawTrianglesArgsForCall[i].indexCount, fake.drawTrianglesArgsForCall[i].indexOffsetInBytes
}

func (fake *FakeGraphicsClient) DrawTrianglesReturns(result1 error) {
	fake.DrawTrianglesStub = nil
	fake.drawTrianglesReturns = struct {
		result1 error
	}{result1}
}

var _ client.GraphicsClient = new(FakeGraphicsClient)
