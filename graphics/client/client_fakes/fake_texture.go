// This file was generated by counterfeiter
package client_fakes

import (
	"sync"

	"github.com/momchil-atanasov/go-whiskey/graphics/client"
)

type FakeTextureClient struct {
	Bind2DTextureStub        func(channel int, textureId client.TextureId) error
	bind2DTextureMutex       sync.RWMutex
	bind2DTextureArgsForCall []struct {
		channel   int
		textureId client.TextureId
	}
	bind2DTextureReturns struct {
		result1 error
	}
	BindCubeTextureStub        func(channel int, textureId client.TextureId) error
	bindCubeTextureMutex       sync.RWMutex
	bindCubeTextureArgsForCall []struct {
		channel   int
		textureId client.TextureId
	}
	bindCubeTextureReturns struct {
		result1 error
	}
}

func (fake *FakeTextureClient) Bind2DTexture(channel int, textureId client.TextureId) error {
	fake.bind2DTextureMutex.Lock()
	fake.bind2DTextureArgsForCall = append(fake.bind2DTextureArgsForCall, struct {
		channel   int
		textureId client.TextureId
	}{channel, textureId})
	fake.bind2DTextureMutex.Unlock()
	if fake.Bind2DTextureStub != nil {
		return fake.Bind2DTextureStub(channel, textureId)
	} else {
		return fake.bind2DTextureReturns.result1
	}
}

func (fake *FakeTextureClient) Bind2DTextureCallCount() int {
	fake.bind2DTextureMutex.RLock()
	defer fake.bind2DTextureMutex.RUnlock()
	return len(fake.bind2DTextureArgsForCall)
}

func (fake *FakeTextureClient) Bind2DTextureArgsForCall(i int) (int, client.TextureId) {
	fake.bind2DTextureMutex.RLock()
	defer fake.bind2DTextureMutex.RUnlock()
	return fake.bind2DTextureArgsForCall[i].channel, fake.bind2DTextureArgsForCall[i].textureId
}

func (fake *FakeTextureClient) Bind2DTextureReturns(result1 error) {
	fake.Bind2DTextureStub = nil
	fake.bind2DTextureReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeTextureClient) BindCubeTexture(channel int, textureId client.TextureId) error {
	fake.bindCubeTextureMutex.Lock()
	fake.bindCubeTextureArgsForCall = append(fake.bindCubeTextureArgsForCall, struct {
		channel   int
		textureId client.TextureId
	}{channel, textureId})
	fake.bindCubeTextureMutex.Unlock()
	if fake.BindCubeTextureStub != nil {
		return fake.BindCubeTextureStub(channel, textureId)
	} else {
		return fake.bindCubeTextureReturns.result1
	}
}

func (fake *FakeTextureClient) BindCubeTextureCallCount() int {
	fake.bindCubeTextureMutex.RLock()
	defer fake.bindCubeTextureMutex.RUnlock()
	return len(fake.bindCubeTextureArgsForCall)
}

func (fake *FakeTextureClient) BindCubeTextureArgsForCall(i int) (int, client.TextureId) {
	fake.bindCubeTextureMutex.RLock()
	defer fake.bindCubeTextureMutex.RUnlock()
	return fake.bindCubeTextureArgsForCall[i].channel, fake.bindCubeTextureArgsForCall[i].textureId
}

func (fake *FakeTextureClient) BindCubeTextureReturns(result1 error) {
	fake.BindCubeTextureStub = nil
	fake.bindCubeTextureReturns = struct {
		result1 error
	}{result1}
}

var _ client.TextureClient = new(FakeTextureClient)
