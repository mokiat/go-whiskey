// Generated by 'github.com/momchil-atanasov/gostub'

package ecs_stubs

import (
	sync "sync"

	alias1 "github.com/momchil-atanasov/go-whiskey/ecs"
)

type EventStub struct {
	StubGUID          int
	SourceStub        func() (result1 alias1.Entity)
	sourceMutex       sync.RWMutex
	sourceArgsForCall []struct {
	}
	sourceReturns struct {
		result1 alias1.Entity
	}
}

var _ alias1.Event = new(EventStub)

func (stub *EventStub) Source() alias1.Entity {
	stub.sourceMutex.Lock()
	defer stub.sourceMutex.Unlock()
	stub.sourceArgsForCall = append(stub.sourceArgsForCall, struct {
	}{})
	if stub.SourceStub != nil {
		return stub.SourceStub()
	} else {
		return stub.sourceReturns.result1
	}
}
func (stub *EventStub) SourceCallCount() int {
	stub.sourceMutex.RLock()
	defer stub.sourceMutex.RUnlock()
	return len(stub.sourceArgsForCall)
}
func (stub *EventStub) SourceReturns(result1 alias1.Entity) {
	stub.sourceMutex.Lock()
	defer stub.sourceMutex.Unlock()
	stub.sourceReturns = struct {
		result1 alias1.Entity
	}{result1}
}
