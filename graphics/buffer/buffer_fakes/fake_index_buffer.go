// This file was generated by counterfeiter
package buffer_fakes

import (
	"sync"

	"github.com/momchil-atanasov/go-whiskey/graphics/buffer"
	"github.com/momchil-atanasov/go-whiskey/graphics/client"
)

type FakeIndexBuffer struct {
	DataStub        func() buffer.IndexBufferData
	dataMutex       sync.RWMutex
	dataArgsForCall []struct{}
	dataReturns struct {
		result1 buffer.IndexBufferData
	}
	UsageStub        func() client.BufferUsage
	usageMutex       sync.RWMutex
	usageArgsForCall []struct{}
	usageReturns struct {
		result1 client.BufferUsage
	}
	IdStub        func() client.BufferId
	idMutex       sync.RWMutex
	idArgsForCall []struct{}
	idReturns struct {
		result1 client.BufferId
	}
	CreatedStub        func() bool
	createdMutex       sync.RWMutex
	createdArgsForCall []struct{}
	createdReturns struct {
		result1 bool
	}
	CreateStub        func(client.BufferClient) error
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 client.BufferClient
	}
	createReturns struct {
		result1 error
	}
	DeleteStub        func(client.BufferClient) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 client.BufferClient
	}
	deleteReturns struct {
		result1 error
	}
}

func (fake *FakeIndexBuffer) Data() buffer.IndexBufferData {
	fake.dataMutex.Lock()
	fake.dataArgsForCall = append(fake.dataArgsForCall, struct{}{})
	fake.dataMutex.Unlock()
	if fake.DataStub != nil {
		return fake.DataStub()
	} else {
		return fake.dataReturns.result1
	}
}

func (fake *FakeIndexBuffer) DataCallCount() int {
	fake.dataMutex.RLock()
	defer fake.dataMutex.RUnlock()
	return len(fake.dataArgsForCall)
}

func (fake *FakeIndexBuffer) DataReturns(result1 buffer.IndexBufferData) {
	fake.DataStub = nil
	fake.dataReturns = struct {
		result1 buffer.IndexBufferData
	}{result1}
}

func (fake *FakeIndexBuffer) Usage() client.BufferUsage {
	fake.usageMutex.Lock()
	fake.usageArgsForCall = append(fake.usageArgsForCall, struct{}{})
	fake.usageMutex.Unlock()
	if fake.UsageStub != nil {
		return fake.UsageStub()
	} else {
		return fake.usageReturns.result1
	}
}

func (fake *FakeIndexBuffer) UsageCallCount() int {
	fake.usageMutex.RLock()
	defer fake.usageMutex.RUnlock()
	return len(fake.usageArgsForCall)
}

func (fake *FakeIndexBuffer) UsageReturns(result1 client.BufferUsage) {
	fake.UsageStub = nil
	fake.usageReturns = struct {
		result1 client.BufferUsage
	}{result1}
}

func (fake *FakeIndexBuffer) Id() client.BufferId {
	fake.idMutex.Lock()
	fake.idArgsForCall = append(fake.idArgsForCall, struct{}{})
	fake.idMutex.Unlock()
	if fake.IdStub != nil {
		return fake.IdStub()
	} else {
		return fake.idReturns.result1
	}
}

func (fake *FakeIndexBuffer) IdCallCount() int {
	fake.idMutex.RLock()
	defer fake.idMutex.RUnlock()
	return len(fake.idArgsForCall)
}

func (fake *FakeIndexBuffer) IdReturns(result1 client.BufferId) {
	fake.IdStub = nil
	fake.idReturns = struct {
		result1 client.BufferId
	}{result1}
}

func (fake *FakeIndexBuffer) Created() bool {
	fake.createdMutex.Lock()
	fake.createdArgsForCall = append(fake.createdArgsForCall, struct{}{})
	fake.createdMutex.Unlock()
	if fake.CreatedStub != nil {
		return fake.CreatedStub()
	} else {
		return fake.createdReturns.result1
	}
}

func (fake *FakeIndexBuffer) CreatedCallCount() int {
	fake.createdMutex.RLock()
	defer fake.createdMutex.RUnlock()
	return len(fake.createdArgsForCall)
}

func (fake *FakeIndexBuffer) CreatedReturns(result1 bool) {
	fake.CreatedStub = nil
	fake.createdReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeIndexBuffer) Create(arg1 client.BufferClient) error {
	fake.createMutex.Lock()
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 client.BufferClient
	}{arg1})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(arg1)
	} else {
		return fake.createReturns.result1
	}
}

func (fake *FakeIndexBuffer) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeIndexBuffer) CreateArgsForCall(i int) client.BufferClient {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].arg1
}

func (fake *FakeIndexBuffer) CreateReturns(result1 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeIndexBuffer) Delete(arg1 client.BufferClient) error {
	fake.deleteMutex.Lock()
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 client.BufferClient
	}{arg1})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(arg1)
	} else {
		return fake.deleteReturns.result1
	}
}

func (fake *FakeIndexBuffer) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeIndexBuffer) DeleteArgsForCall(i int) client.BufferClient {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return fake.deleteArgsForCall[i].arg1
}

func (fake *FakeIndexBuffer) DeleteReturns(result1 error) {
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

var _ buffer.IndexBuffer = new(FakeIndexBuffer)
