// Generated by 'github.com/momchil-atanasov/gostub'

package graphics_stubs

import (
	sync "sync"

	alias1 "github.com/momchil-atanasov/go-whiskey/graphics"
)

type LayerStub struct {
	StubGUID                        int
	SetClearColorEnabledStub        func(arg1 bool)
	setClearColorEnabledMutex       sync.RWMutex
	setClearColorEnabledArgsForCall []struct {
		arg1 bool
	}
	SetClearColorStub        func(arg1 float32, arg2 float32, arg3 float32, arg4 float32)
	setClearColorMutex       sync.RWMutex
	setClearColorArgsForCall []struct {
		arg1 float32
		arg2 float32
		arg3 float32
		arg4 float32
	}
	SetClearDepthEnabledStub        func(arg1 bool)
	setClearDepthEnabledMutex       sync.RWMutex
	setClearDepthEnabledArgsForCall []struct {
		arg1 bool
	}
	ItemBuilderStub        func() (result1 alias1.ItemBuilder)
	itemBuilderMutex       sync.RWMutex
	itemBuilderArgsForCall []struct {
	}
	itemBuilderReturns struct {
		result1 alias1.ItemBuilder
	}
}

var _ alias1.Layer = new(LayerStub)

func (stub *LayerStub) SetClearColorEnabled(arg1 bool) {
	stub.setClearColorEnabledMutex.Lock()
	defer stub.setClearColorEnabledMutex.Unlock()
	stub.setClearColorEnabledArgsForCall = append(stub.setClearColorEnabledArgsForCall, struct {
		arg1 bool
	}{arg1})
	if stub.SetClearColorEnabledStub != nil {
		stub.SetClearColorEnabledStub(arg1)
	}
}
func (stub *LayerStub) SetClearColorEnabledCallCount() int {
	stub.setClearColorEnabledMutex.RLock()
	defer stub.setClearColorEnabledMutex.RUnlock()
	return len(stub.setClearColorEnabledArgsForCall)
}
func (stub *LayerStub) SetClearColorEnabledArgsForCall(index int) bool {
	stub.setClearColorEnabledMutex.RLock()
	defer stub.setClearColorEnabledMutex.RUnlock()
	return stub.setClearColorEnabledArgsForCall[index].arg1
}
func (stub *LayerStub) SetClearColor(arg1 float32, arg2 float32, arg3 float32, arg4 float32) {
	stub.setClearColorMutex.Lock()
	defer stub.setClearColorMutex.Unlock()
	stub.setClearColorArgsForCall = append(stub.setClearColorArgsForCall, struct {
		arg1 float32
		arg2 float32
		arg3 float32
		arg4 float32
	}{arg1, arg2, arg3, arg4})
	if stub.SetClearColorStub != nil {
		stub.SetClearColorStub(arg1, arg2, arg3, arg4)
	}
}
func (stub *LayerStub) SetClearColorCallCount() int {
	stub.setClearColorMutex.RLock()
	defer stub.setClearColorMutex.RUnlock()
	return len(stub.setClearColorArgsForCall)
}
func (stub *LayerStub) SetClearColorArgsForCall(index int) (float32, float32, float32, float32) {
	stub.setClearColorMutex.RLock()
	defer stub.setClearColorMutex.RUnlock()
	return stub.setClearColorArgsForCall[index].arg1, stub.setClearColorArgsForCall[index].arg2, stub.setClearColorArgsForCall[index].arg3, stub.setClearColorArgsForCall[index].arg4
}
func (stub *LayerStub) SetClearDepthEnabled(arg1 bool) {
	stub.setClearDepthEnabledMutex.Lock()
	defer stub.setClearDepthEnabledMutex.Unlock()
	stub.setClearDepthEnabledArgsForCall = append(stub.setClearDepthEnabledArgsForCall, struct {
		arg1 bool
	}{arg1})
	if stub.SetClearDepthEnabledStub != nil {
		stub.SetClearDepthEnabledStub(arg1)
	}
}
func (stub *LayerStub) SetClearDepthEnabledCallCount() int {
	stub.setClearDepthEnabledMutex.RLock()
	defer stub.setClearDepthEnabledMutex.RUnlock()
	return len(stub.setClearDepthEnabledArgsForCall)
}
func (stub *LayerStub) SetClearDepthEnabledArgsForCall(index int) bool {
	stub.setClearDepthEnabledMutex.RLock()
	defer stub.setClearDepthEnabledMutex.RUnlock()
	return stub.setClearDepthEnabledArgsForCall[index].arg1
}
func (stub *LayerStub) ItemBuilder() alias1.ItemBuilder {
	stub.itemBuilderMutex.Lock()
	defer stub.itemBuilderMutex.Unlock()
	stub.itemBuilderArgsForCall = append(stub.itemBuilderArgsForCall, struct {
	}{})
	if stub.ItemBuilderStub != nil {
		return stub.ItemBuilderStub()
	} else {
		return stub.itemBuilderReturns.result1
	}
}
func (stub *LayerStub) ItemBuilderCallCount() int {
	stub.itemBuilderMutex.RLock()
	defer stub.itemBuilderMutex.RUnlock()
	return len(stub.itemBuilderArgsForCall)
}
func (stub *LayerStub) ItemBuilderReturns(result1 alias1.ItemBuilder) {
	stub.itemBuilderMutex.Lock()
	defer stub.itemBuilderMutex.Unlock()
	stub.itemBuilderReturns = struct {
		result1 alias1.ItemBuilder
	}{result1}
}
