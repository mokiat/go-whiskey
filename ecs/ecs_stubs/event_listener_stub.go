// Generated by 'github.com/momchil-atanasov/gostub'

package ecs_stubs

import (
	sync "sync"

	alias1 "github.com/momchil-atanasov/go-whiskey/ecs"
)

type EventListenerStub struct {
	StubGUID           int
	OnEventStub        func(arg1 alias1.Event)
	onEventMutex       sync.RWMutex
	onEventArgsForCall []struct {
		arg1 alias1.Event
	}
}

var _ alias1.EventListener = new(EventListenerStub)

func (stub *EventListenerStub) OnEvent(arg1 alias1.Event) {
	stub.onEventMutex.Lock()
	defer stub.onEventMutex.Unlock()
	stub.onEventArgsForCall = append(stub.onEventArgsForCall, struct {
		arg1 alias1.Event
	}{arg1})
	if stub.OnEventStub != nil {
		stub.OnEventStub(arg1)
	}
}
func (stub *EventListenerStub) OnEventCallCount() int {
	stub.onEventMutex.RLock()
	defer stub.onEventMutex.RUnlock()
	return len(stub.onEventArgsForCall)
}
func (stub *EventListenerStub) OnEventArgsForCall(index int) alias1.Event {
	stub.onEventMutex.RLock()
	defer stub.onEventMutex.RUnlock()
	return stub.onEventArgsForCall[index].arg1
}
