// This file was generated by counterfeiter
package client_fakes

import (
	"sync"

	"github.com/momchil-atanasov/go-whiskey/graphics/client"
)

type FakeShaderClient struct {
	CreateVertexShaderStub        func() (client.ShaderId, error)
	createVertexShaderMutex       sync.RWMutex
	createVertexShaderArgsForCall []struct{}
	createVertexShaderReturns struct {
		result1 client.ShaderId
		result2 error
	}
	CreateFragmentShaderStub        func() (client.ShaderId, error)
	createFragmentShaderMutex       sync.RWMutex
	createFragmentShaderArgsForCall []struct{}
	createFragmentShaderReturns struct {
		result1 client.ShaderId
		result2 error
	}
	SetShaderSourceCodeStub        func(id client.ShaderId, sourceCode string) error
	setShaderSourceCodeMutex       sync.RWMutex
	setShaderSourceCodeArgsForCall []struct {
		id         client.ShaderId
		sourceCode string
	}
	setShaderSourceCodeReturns struct {
		result1 error
	}
	CompileShaderStub        func(id client.ShaderId) error
	compileShaderMutex       sync.RWMutex
	compileShaderArgsForCall []struct {
		id client.ShaderId
	}
	compileShaderReturns struct {
		result1 error
	}
	DeleteShaderStub        func(id client.ShaderId) error
	deleteShaderMutex       sync.RWMutex
	deleteShaderArgsForCall []struct {
		id client.ShaderId
	}
	deleteShaderReturns struct {
		result1 error
	}
	CreateProgramStub        func() (client.ProgramId, error)
	createProgramMutex       sync.RWMutex
	createProgramArgsForCall []struct{}
	createProgramReturns struct {
		result1 client.ProgramId
		result2 error
	}
	AttachShaderToProgramStub        func(shaderId client.ShaderId, programId client.ProgramId) error
	attachShaderToProgramMutex       sync.RWMutex
	attachShaderToProgramArgsForCall []struct {
		shaderId  client.ShaderId
		programId client.ProgramId
	}
	attachShaderToProgramReturns struct {
		result1 error
	}
	LinkProgramStub        func(client.ProgramId) error
	linkProgramMutex       sync.RWMutex
	linkProgramArgsForCall []struct {
		arg1 client.ProgramId
	}
	linkProgramReturns struct {
		result1 error
	}
	GetProgramAttributesStub        func(client.ProgramId) ([]client.AttributeDeclaration, error)
	getProgramAttributesMutex       sync.RWMutex
	getProgramAttributesArgsForCall []struct {
		arg1 client.ProgramId
	}
	getProgramAttributesReturns struct {
		result1 []client.AttributeDeclaration
		result2 error
	}
	GetProgramUniformsStub        func(client.ProgramId) ([]client.UniformDeclaration, error)
	getProgramUniformsMutex       sync.RWMutex
	getProgramUniformsArgsForCall []struct {
		arg1 client.ProgramId
	}
	getProgramUniformsReturns struct {
		result1 []client.UniformDeclaration
		result2 error
	}
	UseProgramStub        func(client.ProgramId) error
	useProgramMutex       sync.RWMutex
	useProgramArgsForCall []struct {
		arg1 client.ProgramId
	}
	useProgramReturns struct {
		result1 error
	}
	DeleteProgramStub        func(client.ProgramId) error
	deleteProgramMutex       sync.RWMutex
	deleteProgramArgsForCall []struct {
		arg1 client.ProgramId
	}
	deleteProgramReturns struct {
		result1 error
	}
}

func (fake *FakeShaderClient) CreateVertexShader() (client.ShaderId, error) {
	fake.createVertexShaderMutex.Lock()
	fake.createVertexShaderArgsForCall = append(fake.createVertexShaderArgsForCall, struct{}{})
	fake.createVertexShaderMutex.Unlock()
	if fake.CreateVertexShaderStub != nil {
		return fake.CreateVertexShaderStub()
	} else {
		return fake.createVertexShaderReturns.result1, fake.createVertexShaderReturns.result2
	}
}

func (fake *FakeShaderClient) CreateVertexShaderCallCount() int {
	fake.createVertexShaderMutex.RLock()
	defer fake.createVertexShaderMutex.RUnlock()
	return len(fake.createVertexShaderArgsForCall)
}

func (fake *FakeShaderClient) CreateVertexShaderReturns(result1 client.ShaderId, result2 error) {
	fake.CreateVertexShaderStub = nil
	fake.createVertexShaderReturns = struct {
		result1 client.ShaderId
		result2 error
	}{result1, result2}
}

func (fake *FakeShaderClient) CreateFragmentShader() (client.ShaderId, error) {
	fake.createFragmentShaderMutex.Lock()
	fake.createFragmentShaderArgsForCall = append(fake.createFragmentShaderArgsForCall, struct{}{})
	fake.createFragmentShaderMutex.Unlock()
	if fake.CreateFragmentShaderStub != nil {
		return fake.CreateFragmentShaderStub()
	} else {
		return fake.createFragmentShaderReturns.result1, fake.createFragmentShaderReturns.result2
	}
}

func (fake *FakeShaderClient) CreateFragmentShaderCallCount() int {
	fake.createFragmentShaderMutex.RLock()
	defer fake.createFragmentShaderMutex.RUnlock()
	return len(fake.createFragmentShaderArgsForCall)
}

func (fake *FakeShaderClient) CreateFragmentShaderReturns(result1 client.ShaderId, result2 error) {
	fake.CreateFragmentShaderStub = nil
	fake.createFragmentShaderReturns = struct {
		result1 client.ShaderId
		result2 error
	}{result1, result2}
}

func (fake *FakeShaderClient) SetShaderSourceCode(id client.ShaderId, sourceCode string) error {
	fake.setShaderSourceCodeMutex.Lock()
	fake.setShaderSourceCodeArgsForCall = append(fake.setShaderSourceCodeArgsForCall, struct {
		id         client.ShaderId
		sourceCode string
	}{id, sourceCode})
	fake.setShaderSourceCodeMutex.Unlock()
	if fake.SetShaderSourceCodeStub != nil {
		return fake.SetShaderSourceCodeStub(id, sourceCode)
	} else {
		return fake.setShaderSourceCodeReturns.result1
	}
}

func (fake *FakeShaderClient) SetShaderSourceCodeCallCount() int {
	fake.setShaderSourceCodeMutex.RLock()
	defer fake.setShaderSourceCodeMutex.RUnlock()
	return len(fake.setShaderSourceCodeArgsForCall)
}

func (fake *FakeShaderClient) SetShaderSourceCodeArgsForCall(i int) (client.ShaderId, string) {
	fake.setShaderSourceCodeMutex.RLock()
	defer fake.setShaderSourceCodeMutex.RUnlock()
	return fake.setShaderSourceCodeArgsForCall[i].id, fake.setShaderSourceCodeArgsForCall[i].sourceCode
}

func (fake *FakeShaderClient) SetShaderSourceCodeReturns(result1 error) {
	fake.SetShaderSourceCodeStub = nil
	fake.setShaderSourceCodeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeShaderClient) CompileShader(id client.ShaderId) error {
	fake.compileShaderMutex.Lock()
	fake.compileShaderArgsForCall = append(fake.compileShaderArgsForCall, struct {
		id client.ShaderId
	}{id})
	fake.compileShaderMutex.Unlock()
	if fake.CompileShaderStub != nil {
		return fake.CompileShaderStub(id)
	} else {
		return fake.compileShaderReturns.result1
	}
}

func (fake *FakeShaderClient) CompileShaderCallCount() int {
	fake.compileShaderMutex.RLock()
	defer fake.compileShaderMutex.RUnlock()
	return len(fake.compileShaderArgsForCall)
}

func (fake *FakeShaderClient) CompileShaderArgsForCall(i int) client.ShaderId {
	fake.compileShaderMutex.RLock()
	defer fake.compileShaderMutex.RUnlock()
	return fake.compileShaderArgsForCall[i].id
}

func (fake *FakeShaderClient) CompileShaderReturns(result1 error) {
	fake.CompileShaderStub = nil
	fake.compileShaderReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeShaderClient) DeleteShader(id client.ShaderId) error {
	fake.deleteShaderMutex.Lock()
	fake.deleteShaderArgsForCall = append(fake.deleteShaderArgsForCall, struct {
		id client.ShaderId
	}{id})
	fake.deleteShaderMutex.Unlock()
	if fake.DeleteShaderStub != nil {
		return fake.DeleteShaderStub(id)
	} else {
		return fake.deleteShaderReturns.result1
	}
}

func (fake *FakeShaderClient) DeleteShaderCallCount() int {
	fake.deleteShaderMutex.RLock()
	defer fake.deleteShaderMutex.RUnlock()
	return len(fake.deleteShaderArgsForCall)
}

func (fake *FakeShaderClient) DeleteShaderArgsForCall(i int) client.ShaderId {
	fake.deleteShaderMutex.RLock()
	defer fake.deleteShaderMutex.RUnlock()
	return fake.deleteShaderArgsForCall[i].id
}

func (fake *FakeShaderClient) DeleteShaderReturns(result1 error) {
	fake.DeleteShaderStub = nil
	fake.deleteShaderReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeShaderClient) CreateProgram() (client.ProgramId, error) {
	fake.createProgramMutex.Lock()
	fake.createProgramArgsForCall = append(fake.createProgramArgsForCall, struct{}{})
	fake.createProgramMutex.Unlock()
	if fake.CreateProgramStub != nil {
		return fake.CreateProgramStub()
	} else {
		return fake.createProgramReturns.result1, fake.createProgramReturns.result2
	}
}

func (fake *FakeShaderClient) CreateProgramCallCount() int {
	fake.createProgramMutex.RLock()
	defer fake.createProgramMutex.RUnlock()
	return len(fake.createProgramArgsForCall)
}

func (fake *FakeShaderClient) CreateProgramReturns(result1 client.ProgramId, result2 error) {
	fake.CreateProgramStub = nil
	fake.createProgramReturns = struct {
		result1 client.ProgramId
		result2 error
	}{result1, result2}
}

func (fake *FakeShaderClient) AttachShaderToProgram(shaderId client.ShaderId, programId client.ProgramId) error {
	fake.attachShaderToProgramMutex.Lock()
	fake.attachShaderToProgramArgsForCall = append(fake.attachShaderToProgramArgsForCall, struct {
		shaderId  client.ShaderId
		programId client.ProgramId
	}{shaderId, programId})
	fake.attachShaderToProgramMutex.Unlock()
	if fake.AttachShaderToProgramStub != nil {
		return fake.AttachShaderToProgramStub(shaderId, programId)
	} else {
		return fake.attachShaderToProgramReturns.result1
	}
}

func (fake *FakeShaderClient) AttachShaderToProgramCallCount() int {
	fake.attachShaderToProgramMutex.RLock()
	defer fake.attachShaderToProgramMutex.RUnlock()
	return len(fake.attachShaderToProgramArgsForCall)
}

func (fake *FakeShaderClient) AttachShaderToProgramArgsForCall(i int) (client.ShaderId, client.ProgramId) {
	fake.attachShaderToProgramMutex.RLock()
	defer fake.attachShaderToProgramMutex.RUnlock()
	return fake.attachShaderToProgramArgsForCall[i].shaderId, fake.attachShaderToProgramArgsForCall[i].programId
}

func (fake *FakeShaderClient) AttachShaderToProgramReturns(result1 error) {
	fake.AttachShaderToProgramStub = nil
	fake.attachShaderToProgramReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeShaderClient) LinkProgram(arg1 client.ProgramId) error {
	fake.linkProgramMutex.Lock()
	fake.linkProgramArgsForCall = append(fake.linkProgramArgsForCall, struct {
		arg1 client.ProgramId
	}{arg1})
	fake.linkProgramMutex.Unlock()
	if fake.LinkProgramStub != nil {
		return fake.LinkProgramStub(arg1)
	} else {
		return fake.linkProgramReturns.result1
	}
}

func (fake *FakeShaderClient) LinkProgramCallCount() int {
	fake.linkProgramMutex.RLock()
	defer fake.linkProgramMutex.RUnlock()
	return len(fake.linkProgramArgsForCall)
}

func (fake *FakeShaderClient) LinkProgramArgsForCall(i int) client.ProgramId {
	fake.linkProgramMutex.RLock()
	defer fake.linkProgramMutex.RUnlock()
	return fake.linkProgramArgsForCall[i].arg1
}

func (fake *FakeShaderClient) LinkProgramReturns(result1 error) {
	fake.LinkProgramStub = nil
	fake.linkProgramReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeShaderClient) GetProgramAttributes(arg1 client.ProgramId) ([]client.AttributeDeclaration, error) {
	fake.getProgramAttributesMutex.Lock()
	fake.getProgramAttributesArgsForCall = append(fake.getProgramAttributesArgsForCall, struct {
		arg1 client.ProgramId
	}{arg1})
	fake.getProgramAttributesMutex.Unlock()
	if fake.GetProgramAttributesStub != nil {
		return fake.GetProgramAttributesStub(arg1)
	} else {
		return fake.getProgramAttributesReturns.result1, fake.getProgramAttributesReturns.result2
	}
}

func (fake *FakeShaderClient) GetProgramAttributesCallCount() int {
	fake.getProgramAttributesMutex.RLock()
	defer fake.getProgramAttributesMutex.RUnlock()
	return len(fake.getProgramAttributesArgsForCall)
}

func (fake *FakeShaderClient) GetProgramAttributesArgsForCall(i int) client.ProgramId {
	fake.getProgramAttributesMutex.RLock()
	defer fake.getProgramAttributesMutex.RUnlock()
	return fake.getProgramAttributesArgsForCall[i].arg1
}

func (fake *FakeShaderClient) GetProgramAttributesReturns(result1 []client.AttributeDeclaration, result2 error) {
	fake.GetProgramAttributesStub = nil
	fake.getProgramAttributesReturns = struct {
		result1 []client.AttributeDeclaration
		result2 error
	}{result1, result2}
}

func (fake *FakeShaderClient) GetProgramUniforms(arg1 client.ProgramId) ([]client.UniformDeclaration, error) {
	fake.getProgramUniformsMutex.Lock()
	fake.getProgramUniformsArgsForCall = append(fake.getProgramUniformsArgsForCall, struct {
		arg1 client.ProgramId
	}{arg1})
	fake.getProgramUniformsMutex.Unlock()
	if fake.GetProgramUniformsStub != nil {
		return fake.GetProgramUniformsStub(arg1)
	} else {
		return fake.getProgramUniformsReturns.result1, fake.getProgramUniformsReturns.result2
	}
}

func (fake *FakeShaderClient) GetProgramUniformsCallCount() int {
	fake.getProgramUniformsMutex.RLock()
	defer fake.getProgramUniformsMutex.RUnlock()
	return len(fake.getProgramUniformsArgsForCall)
}

func (fake *FakeShaderClient) GetProgramUniformsArgsForCall(i int) client.ProgramId {
	fake.getProgramUniformsMutex.RLock()
	defer fake.getProgramUniformsMutex.RUnlock()
	return fake.getProgramUniformsArgsForCall[i].arg1
}

func (fake *FakeShaderClient) GetProgramUniformsReturns(result1 []client.UniformDeclaration, result2 error) {
	fake.GetProgramUniformsStub = nil
	fake.getProgramUniformsReturns = struct {
		result1 []client.UniformDeclaration
		result2 error
	}{result1, result2}
}

func (fake *FakeShaderClient) UseProgram(arg1 client.ProgramId) error {
	fake.useProgramMutex.Lock()
	fake.useProgramArgsForCall = append(fake.useProgramArgsForCall, struct {
		arg1 client.ProgramId
	}{arg1})
	fake.useProgramMutex.Unlock()
	if fake.UseProgramStub != nil {
		return fake.UseProgramStub(arg1)
	} else {
		return fake.useProgramReturns.result1
	}
}

func (fake *FakeShaderClient) UseProgramCallCount() int {
	fake.useProgramMutex.RLock()
	defer fake.useProgramMutex.RUnlock()
	return len(fake.useProgramArgsForCall)
}

func (fake *FakeShaderClient) UseProgramArgsForCall(i int) client.ProgramId {
	fake.useProgramMutex.RLock()
	defer fake.useProgramMutex.RUnlock()
	return fake.useProgramArgsForCall[i].arg1
}

func (fake *FakeShaderClient) UseProgramReturns(result1 error) {
	fake.UseProgramStub = nil
	fake.useProgramReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeShaderClient) DeleteProgram(arg1 client.ProgramId) error {
	fake.deleteProgramMutex.Lock()
	fake.deleteProgramArgsForCall = append(fake.deleteProgramArgsForCall, struct {
		arg1 client.ProgramId
	}{arg1})
	fake.deleteProgramMutex.Unlock()
	if fake.DeleteProgramStub != nil {
		return fake.DeleteProgramStub(arg1)
	} else {
		return fake.deleteProgramReturns.result1
	}
}

func (fake *FakeShaderClient) DeleteProgramCallCount() int {
	fake.deleteProgramMutex.RLock()
	defer fake.deleteProgramMutex.RUnlock()
	return len(fake.deleteProgramArgsForCall)
}

func (fake *FakeShaderClient) DeleteProgramArgsForCall(i int) client.ProgramId {
	fake.deleteProgramMutex.RLock()
	defer fake.deleteProgramMutex.RUnlock()
	return fake.deleteProgramArgsForCall[i].arg1
}

func (fake *FakeShaderClient) DeleteProgramReturns(result1 error) {
	fake.DeleteProgramStub = nil
	fake.deleteProgramReturns = struct {
		result1 error
	}{result1}
}

var _ client.ShaderClient = new(FakeShaderClient)
