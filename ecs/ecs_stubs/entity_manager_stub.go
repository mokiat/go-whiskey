// Generated by 'github.com/mokiat/gostub'

package ecs_stubs

import (
	sync "sync"

	alias1 "github.com/mokiat/go-whiskey/ecs"
)

type EntityManagerStub struct {
	StubGUID                int
	CreateEntityStub        func() (result1 alias1.Entity)
	createEntityMutex       sync.RWMutex
	createEntityArgsForCall []struct {
	}
	createEntityReturns struct {
		result1 alias1.Entity
	}
	HasEntityStub        func(arg1 alias1.Entity) (result1 bool)
	hasEntityMutex       sync.RWMutex
	hasEntityArgsForCall []struct {
		arg1 alias1.Entity
	}
	hasEntityReturns struct {
		result1 bool
	}
	DeleteEntityStub        func(arg1 alias1.Entity)
	deleteEntityMutex       sync.RWMutex
	deleteEntityArgsForCall []struct {
		arg1 alias1.Entity
	}
	DeleteAllEntitiesStub        func()
	deleteAllEntitiesMutex       sync.RWMutex
	deleteAllEntitiesArgsForCall []struct {
	}
	AddEntityComponentStub        func(arg1 alias1.Entity, arg2 alias1.ComponentType, arg3 interface{})
	addEntityComponentMutex       sync.RWMutex
	addEntityComponentArgsForCall []struct {
		arg1 alias1.Entity
		arg2 alias1.ComponentType
		arg3 interface{}
	}
	EntityHasComponentStub        func(arg1 alias1.Entity, arg2 alias1.ComponentType) (result1 bool)
	entityHasComponentMutex       sync.RWMutex
	entityHasComponentArgsForCall []struct {
		arg1 alias1.Entity
		arg2 alias1.ComponentType
	}
	entityHasComponentReturns struct {
		result1 bool
	}
	EntityComponentStub        func(arg1 alias1.Entity, arg2 alias1.ComponentType) (result1 interface{})
	entityComponentMutex       sync.RWMutex
	entityComponentArgsForCall []struct {
		arg1 alias1.Entity
		arg2 alias1.ComponentType
	}
	entityComponentReturns struct {
		result1 interface{}
	}
	RemoveEntityComponentStub        func(arg1 alias1.Entity, arg2 alias1.ComponentType)
	removeEntityComponentMutex       sync.RWMutex
	removeEntityComponentArgsForCall []struct {
		arg1 alias1.Entity
		arg2 alias1.ComponentType
	}
}

var _ alias1.EntityManager = new(EntityManagerStub)

func (stub *EntityManagerStub) CreateEntity() alias1.Entity {
	stub.createEntityMutex.Lock()
	defer stub.createEntityMutex.Unlock()
	stub.createEntityArgsForCall = append(stub.createEntityArgsForCall, struct {
	}{})
	if stub.CreateEntityStub != nil {
		return stub.CreateEntityStub()
	} else {
		return stub.createEntityReturns.result1
	}
}
func (stub *EntityManagerStub) CreateEntityCallCount() int {
	stub.createEntityMutex.RLock()
	defer stub.createEntityMutex.RUnlock()
	return len(stub.createEntityArgsForCall)
}
func (stub *EntityManagerStub) CreateEntityReturns(result1 alias1.Entity) {
	stub.createEntityMutex.Lock()
	defer stub.createEntityMutex.Unlock()
	stub.createEntityReturns = struct {
		result1 alias1.Entity
	}{result1}
}
func (stub *EntityManagerStub) HasEntity(arg1 alias1.Entity) bool {
	stub.hasEntityMutex.Lock()
	defer stub.hasEntityMutex.Unlock()
	stub.hasEntityArgsForCall = append(stub.hasEntityArgsForCall, struct {
		arg1 alias1.Entity
	}{arg1})
	if stub.HasEntityStub != nil {
		return stub.HasEntityStub(arg1)
	} else {
		return stub.hasEntityReturns.result1
	}
}
func (stub *EntityManagerStub) HasEntityCallCount() int {
	stub.hasEntityMutex.RLock()
	defer stub.hasEntityMutex.RUnlock()
	return len(stub.hasEntityArgsForCall)
}
func (stub *EntityManagerStub) HasEntityArgsForCall(index int) alias1.Entity {
	stub.hasEntityMutex.RLock()
	defer stub.hasEntityMutex.RUnlock()
	return stub.hasEntityArgsForCall[index].arg1
}
func (stub *EntityManagerStub) HasEntityReturns(result1 bool) {
	stub.hasEntityMutex.Lock()
	defer stub.hasEntityMutex.Unlock()
	stub.hasEntityReturns = struct {
		result1 bool
	}{result1}
}
func (stub *EntityManagerStub) DeleteEntity(arg1 alias1.Entity) {
	stub.deleteEntityMutex.Lock()
	defer stub.deleteEntityMutex.Unlock()
	stub.deleteEntityArgsForCall = append(stub.deleteEntityArgsForCall, struct {
		arg1 alias1.Entity
	}{arg1})
	if stub.DeleteEntityStub != nil {
		stub.DeleteEntityStub(arg1)
	}
}
func (stub *EntityManagerStub) DeleteEntityCallCount() int {
	stub.deleteEntityMutex.RLock()
	defer stub.deleteEntityMutex.RUnlock()
	return len(stub.deleteEntityArgsForCall)
}
func (stub *EntityManagerStub) DeleteEntityArgsForCall(index int) alias1.Entity {
	stub.deleteEntityMutex.RLock()
	defer stub.deleteEntityMutex.RUnlock()
	return stub.deleteEntityArgsForCall[index].arg1
}
func (stub *EntityManagerStub) DeleteAllEntities() {
	stub.deleteAllEntitiesMutex.Lock()
	defer stub.deleteAllEntitiesMutex.Unlock()
	stub.deleteAllEntitiesArgsForCall = append(stub.deleteAllEntitiesArgsForCall, struct {
	}{})
	if stub.DeleteAllEntitiesStub != nil {
		stub.DeleteAllEntitiesStub()
	}
}
func (stub *EntityManagerStub) DeleteAllEntitiesCallCount() int {
	stub.deleteAllEntitiesMutex.RLock()
	defer stub.deleteAllEntitiesMutex.RUnlock()
	return len(stub.deleteAllEntitiesArgsForCall)
}
func (stub *EntityManagerStub) AddEntityComponent(arg1 alias1.Entity, arg2 alias1.ComponentType, arg3 interface{}) {
	stub.addEntityComponentMutex.Lock()
	defer stub.addEntityComponentMutex.Unlock()
	stub.addEntityComponentArgsForCall = append(stub.addEntityComponentArgsForCall, struct {
		arg1 alias1.Entity
		arg2 alias1.ComponentType
		arg3 interface{}
	}{arg1, arg2, arg3})
	if stub.AddEntityComponentStub != nil {
		stub.AddEntityComponentStub(arg1, arg2, arg3)
	}
}
func (stub *EntityManagerStub) AddEntityComponentCallCount() int {
	stub.addEntityComponentMutex.RLock()
	defer stub.addEntityComponentMutex.RUnlock()
	return len(stub.addEntityComponentArgsForCall)
}
func (stub *EntityManagerStub) AddEntityComponentArgsForCall(index int) (alias1.Entity, alias1.ComponentType, interface{}) {
	stub.addEntityComponentMutex.RLock()
	defer stub.addEntityComponentMutex.RUnlock()
	return stub.addEntityComponentArgsForCall[index].arg1, stub.addEntityComponentArgsForCall[index].arg2, stub.addEntityComponentArgsForCall[index].arg3
}
func (stub *EntityManagerStub) EntityHasComponent(arg1 alias1.Entity, arg2 alias1.ComponentType) bool {
	stub.entityHasComponentMutex.Lock()
	defer stub.entityHasComponentMutex.Unlock()
	stub.entityHasComponentArgsForCall = append(stub.entityHasComponentArgsForCall, struct {
		arg1 alias1.Entity
		arg2 alias1.ComponentType
	}{arg1, arg2})
	if stub.EntityHasComponentStub != nil {
		return stub.EntityHasComponentStub(arg1, arg2)
	} else {
		return stub.entityHasComponentReturns.result1
	}
}
func (stub *EntityManagerStub) EntityHasComponentCallCount() int {
	stub.entityHasComponentMutex.RLock()
	defer stub.entityHasComponentMutex.RUnlock()
	return len(stub.entityHasComponentArgsForCall)
}
func (stub *EntityManagerStub) EntityHasComponentArgsForCall(index int) (alias1.Entity, alias1.ComponentType) {
	stub.entityHasComponentMutex.RLock()
	defer stub.entityHasComponentMutex.RUnlock()
	return stub.entityHasComponentArgsForCall[index].arg1, stub.entityHasComponentArgsForCall[index].arg2
}
func (stub *EntityManagerStub) EntityHasComponentReturns(result1 bool) {
	stub.entityHasComponentMutex.Lock()
	defer stub.entityHasComponentMutex.Unlock()
	stub.entityHasComponentReturns = struct {
		result1 bool
	}{result1}
}
func (stub *EntityManagerStub) EntityComponent(arg1 alias1.Entity, arg2 alias1.ComponentType) interface{} {
	stub.entityComponentMutex.Lock()
	defer stub.entityComponentMutex.Unlock()
	stub.entityComponentArgsForCall = append(stub.entityComponentArgsForCall, struct {
		arg1 alias1.Entity
		arg2 alias1.ComponentType
	}{arg1, arg2})
	if stub.EntityComponentStub != nil {
		return stub.EntityComponentStub(arg1, arg2)
	} else {
		return stub.entityComponentReturns.result1
	}
}
func (stub *EntityManagerStub) EntityComponentCallCount() int {
	stub.entityComponentMutex.RLock()
	defer stub.entityComponentMutex.RUnlock()
	return len(stub.entityComponentArgsForCall)
}
func (stub *EntityManagerStub) EntityComponentArgsForCall(index int) (alias1.Entity, alias1.ComponentType) {
	stub.entityComponentMutex.RLock()
	defer stub.entityComponentMutex.RUnlock()
	return stub.entityComponentArgsForCall[index].arg1, stub.entityComponentArgsForCall[index].arg2
}
func (stub *EntityManagerStub) EntityComponentReturns(result1 interface{}) {
	stub.entityComponentMutex.Lock()
	defer stub.entityComponentMutex.Unlock()
	stub.entityComponentReturns = struct {
		result1 interface{}
	}{result1}
}
func (stub *EntityManagerStub) RemoveEntityComponent(arg1 alias1.Entity, arg2 alias1.ComponentType) {
	stub.removeEntityComponentMutex.Lock()
	defer stub.removeEntityComponentMutex.Unlock()
	stub.removeEntityComponentArgsForCall = append(stub.removeEntityComponentArgsForCall, struct {
		arg1 alias1.Entity
		arg2 alias1.ComponentType
	}{arg1, arg2})
	if stub.RemoveEntityComponentStub != nil {
		stub.RemoveEntityComponentStub(arg1, arg2)
	}
}
func (stub *EntityManagerStub) RemoveEntityComponentCallCount() int {
	stub.removeEntityComponentMutex.RLock()
	defer stub.removeEntityComponentMutex.RUnlock()
	return len(stub.removeEntityComponentArgsForCall)
}
func (stub *EntityManagerStub) RemoveEntityComponentArgsForCall(index int) (alias1.Entity, alias1.ComponentType) {
	stub.removeEntityComponentMutex.RLock()
	defer stub.removeEntityComponentMutex.RUnlock()
	return stub.removeEntityComponentArgsForCall[index].arg1, stub.removeEntityComponentArgsForCall[index].arg2
}
