// This file was generated by counterfeiter
package shader_fakes

import (
	"sync"

	"github.com/momchil-atanasov/go-whiskey/graphics/shader"
)

type FakeShader struct {
	SourceCodeStub        func() string
	sourceCodeMutex       sync.RWMutex
	sourceCodeArgsForCall []struct{}
	sourceCodeReturns struct {
		result1 string
	}
	RemoteStub        func() shader.RemoteShader
	remoteMutex       sync.RWMutex
	remoteArgsForCall []struct{}
	remoteReturns struct {
		result1 shader.RemoteShader
	}
}

func (fake *FakeShader) SourceCode() string {
	fake.sourceCodeMutex.Lock()
	fake.sourceCodeArgsForCall = append(fake.sourceCodeArgsForCall, struct{}{})
	fake.sourceCodeMutex.Unlock()
	if fake.SourceCodeStub != nil {
		return fake.SourceCodeStub()
	} else {
		return fake.sourceCodeReturns.result1
	}
}

func (fake *FakeShader) SourceCodeCallCount() int {
	fake.sourceCodeMutex.RLock()
	defer fake.sourceCodeMutex.RUnlock()
	return len(fake.sourceCodeArgsForCall)
}

func (fake *FakeShader) SourceCodeReturns(result1 string) {
	fake.SourceCodeStub = nil
	fake.sourceCodeReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeShader) Remote() shader.RemoteShader {
	fake.remoteMutex.Lock()
	fake.remoteArgsForCall = append(fake.remoteArgsForCall, struct{}{})
	fake.remoteMutex.Unlock()
	if fake.RemoteStub != nil {
		return fake.RemoteStub()
	} else {
		return fake.remoteReturns.result1
	}
}

func (fake *FakeShader) RemoteCallCount() int {
	fake.remoteMutex.RLock()
	defer fake.remoteMutex.RUnlock()
	return len(fake.remoteArgsForCall)
}

func (fake *FakeShader) RemoteReturns(result1 shader.RemoteShader) {
	fake.RemoteStub = nil
	fake.remoteReturns = struct {
		result1 shader.RemoteShader
	}{result1}
}

var _ shader.Shader = new(FakeShader)
