// This file was generated by counterfeiter
package client_fakes

import (
	"sync"

	"github.com/momchil-atanasov/go-whiskey/graphics/client"
	"github.com/momchil-atanasov/go-whiskey/math"
)

type FakeUniformClient struct {
	BindVec4UniformStub        func(client.UniformLocation, math.Vec4)
	bindVec4UniformMutex       sync.RWMutex
	bindVec4UniformArgsForCall []struct {
		arg1 client.UniformLocation
		arg2 math.Vec4
	}
	BindMat4x4UniformStub        func(client.UniformLocation, math.Mat4x4)
	bindMat4x4UniformMutex       sync.RWMutex
	bindMat4x4UniformArgsForCall []struct {
		arg1 client.UniformLocation
		arg2 math.Mat4x4
	}
}

func (fake *FakeUniformClient) BindVec4Uniform(arg1 client.UniformLocation, arg2 math.Vec4) {
	fake.bindVec4UniformMutex.Lock()
	fake.bindVec4UniformArgsForCall = append(fake.bindVec4UniformArgsForCall, struct {
		arg1 client.UniformLocation
		arg2 math.Vec4
	}{arg1, arg2})
	fake.bindVec4UniformMutex.Unlock()
	if fake.BindVec4UniformStub != nil {
		fake.BindVec4UniformStub(arg1, arg2)
	}
}

func (fake *FakeUniformClient) BindVec4UniformCallCount() int {
	fake.bindVec4UniformMutex.RLock()
	defer fake.bindVec4UniformMutex.RUnlock()
	return len(fake.bindVec4UniformArgsForCall)
}

func (fake *FakeUniformClient) BindVec4UniformArgsForCall(i int) (client.UniformLocation, math.Vec4) {
	fake.bindVec4UniformMutex.RLock()
	defer fake.bindVec4UniformMutex.RUnlock()
	return fake.bindVec4UniformArgsForCall[i].arg1, fake.bindVec4UniformArgsForCall[i].arg2
}

func (fake *FakeUniformClient) BindMat4x4Uniform(arg1 client.UniformLocation, arg2 math.Mat4x4) {
	fake.bindMat4x4UniformMutex.Lock()
	fake.bindMat4x4UniformArgsForCall = append(fake.bindMat4x4UniformArgsForCall, struct {
		arg1 client.UniformLocation
		arg2 math.Mat4x4
	}{arg1, arg2})
	fake.bindMat4x4UniformMutex.Unlock()
	if fake.BindMat4x4UniformStub != nil {
		fake.BindMat4x4UniformStub(arg1, arg2)
	}
}

func (fake *FakeUniformClient) BindMat4x4UniformCallCount() int {
	fake.bindMat4x4UniformMutex.RLock()
	defer fake.bindMat4x4UniformMutex.RUnlock()
	return len(fake.bindMat4x4UniformArgsForCall)
}

func (fake *FakeUniformClient) BindMat4x4UniformArgsForCall(i int) (client.UniformLocation, math.Mat4x4) {
	fake.bindMat4x4UniformMutex.RLock()
	defer fake.bindMat4x4UniformMutex.RUnlock()
	return fake.bindMat4x4UniformArgsForCall[i].arg1, fake.bindMat4x4UniformArgsForCall[i].arg2
}

var _ client.UniformClient = new(FakeUniformClient)
