// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/momchil-atanasov/go-whiskey/graphics"
)

type FakeFacade struct {
	CreateVertexShaderStub        func() graphics.ResourceID
	createVertexShaderMutex       sync.RWMutex
	createVertexShaderArgsForCall []struct{}
	createVertexShaderReturns struct {
		result1 graphics.ResourceID
	}
	CreateFragmentShaderStub        func() graphics.ResourceID
	createFragmentShaderMutex       sync.RWMutex
	createFragmentShaderArgsForCall []struct{}
	createFragmentShaderReturns struct {
		result1 graphics.ResourceID
	}
	SetShaderSourceCodeStub        func(shaderId graphics.ResourceID, sourceCode string)
	setShaderSourceCodeMutex       sync.RWMutex
	setShaderSourceCodeArgsForCall []struct {
		shaderId   graphics.ResourceID
		sourceCode string
	}
	CompileShaderStub        func(shaderId graphics.ResourceID)
	compileShaderMutex       sync.RWMutex
	compileShaderArgsForCall []struct {
		shaderId graphics.ResourceID
	}
	DeleteShaderStub        func(shaderId graphics.ResourceID)
	deleteShaderMutex       sync.RWMutex
	deleteShaderArgsForCall []struct {
		shaderId graphics.ResourceID
	}
}

func (fake *FakeFacade) CreateVertexShader() graphics.ResourceID {
	fake.createVertexShaderMutex.Lock()
	fake.createVertexShaderArgsForCall = append(fake.createVertexShaderArgsForCall, struct{}{})
	fake.createVertexShaderMutex.Unlock()
	if fake.CreateVertexShaderStub != nil {
		return fake.CreateVertexShaderStub()
	} else {
		return fake.createVertexShaderReturns.result1
	}
}

func (fake *FakeFacade) CreateVertexShaderCallCount() int {
	fake.createVertexShaderMutex.RLock()
	defer fake.createVertexShaderMutex.RUnlock()
	return len(fake.createVertexShaderArgsForCall)
}

func (fake *FakeFacade) CreateVertexShaderReturns(result1 graphics.ResourceID) {
	fake.CreateVertexShaderStub = nil
	fake.createVertexShaderReturns = struct {
		result1 graphics.ResourceID
	}{result1}
}

func (fake *FakeFacade) CreateFragmentShader() graphics.ResourceID {
	fake.createFragmentShaderMutex.Lock()
	fake.createFragmentShaderArgsForCall = append(fake.createFragmentShaderArgsForCall, struct{}{})
	fake.createFragmentShaderMutex.Unlock()
	if fake.CreateFragmentShaderStub != nil {
		return fake.CreateFragmentShaderStub()
	} else {
		return fake.createFragmentShaderReturns.result1
	}
}

func (fake *FakeFacade) CreateFragmentShaderCallCount() int {
	fake.createFragmentShaderMutex.RLock()
	defer fake.createFragmentShaderMutex.RUnlock()
	return len(fake.createFragmentShaderArgsForCall)
}

func (fake *FakeFacade) CreateFragmentShaderReturns(result1 graphics.ResourceID) {
	fake.CreateFragmentShaderStub = nil
	fake.createFragmentShaderReturns = struct {
		result1 graphics.ResourceID
	}{result1}
}

func (fake *FakeFacade) SetShaderSourceCode(shaderId graphics.ResourceID, sourceCode string) {
	fake.setShaderSourceCodeMutex.Lock()
	fake.setShaderSourceCodeArgsForCall = append(fake.setShaderSourceCodeArgsForCall, struct {
		shaderId   graphics.ResourceID
		sourceCode string
	}{shaderId, sourceCode})
	fake.setShaderSourceCodeMutex.Unlock()
	if fake.SetShaderSourceCodeStub != nil {
		fake.SetShaderSourceCodeStub(shaderId, sourceCode)
	}
}

func (fake *FakeFacade) SetShaderSourceCodeCallCount() int {
	fake.setShaderSourceCodeMutex.RLock()
	defer fake.setShaderSourceCodeMutex.RUnlock()
	return len(fake.setShaderSourceCodeArgsForCall)
}

func (fake *FakeFacade) SetShaderSourceCodeArgsForCall(i int) (graphics.ResourceID, string) {
	fake.setShaderSourceCodeMutex.RLock()
	defer fake.setShaderSourceCodeMutex.RUnlock()
	return fake.setShaderSourceCodeArgsForCall[i].shaderId, fake.setShaderSourceCodeArgsForCall[i].sourceCode
}

func (fake *FakeFacade) CompileShader(shaderId graphics.ResourceID) {
	fake.compileShaderMutex.Lock()
	fake.compileShaderArgsForCall = append(fake.compileShaderArgsForCall, struct {
		shaderId graphics.ResourceID
	}{shaderId})
	fake.compileShaderMutex.Unlock()
	if fake.CompileShaderStub != nil {
		fake.CompileShaderStub(shaderId)
	}
}

func (fake *FakeFacade) CompileShaderCallCount() int {
	fake.compileShaderMutex.RLock()
	defer fake.compileShaderMutex.RUnlock()
	return len(fake.compileShaderArgsForCall)
}

func (fake *FakeFacade) CompileShaderArgsForCall(i int) graphics.ResourceID {
	fake.compileShaderMutex.RLock()
	defer fake.compileShaderMutex.RUnlock()
	return fake.compileShaderArgsForCall[i].shaderId
}

func (fake *FakeFacade) DeleteShader(shaderId graphics.ResourceID) {
	fake.deleteShaderMutex.Lock()
	fake.deleteShaderArgsForCall = append(fake.deleteShaderArgsForCall, struct {
		shaderId graphics.ResourceID
	}{shaderId})
	fake.deleteShaderMutex.Unlock()
	if fake.DeleteShaderStub != nil {
		fake.DeleteShaderStub(shaderId)
	}
}

func (fake *FakeFacade) DeleteShaderCallCount() int {
	fake.deleteShaderMutex.RLock()
	defer fake.deleteShaderMutex.RUnlock()
	return len(fake.deleteShaderArgsForCall)
}

func (fake *FakeFacade) DeleteShaderArgsForCall(i int) graphics.ResourceID {
	fake.deleteShaderMutex.RLock()
	defer fake.deleteShaderMutex.RUnlock()
	return fake.deleteShaderArgsForCall[i].shaderId
}

var _ graphics.Facade = new(FakeFacade)
