// Generated by 'github.com/momchil-atanasov/gostub'

package graphics_stubs

import (
	sync "sync"

	alias1 "github.com/momchil-atanasov/go-whiskey/graphics"
)

type IndexArrayStub struct {
	SizeStub        func() (result1 int)
	sizeMutex       sync.RWMutex
	sizeArgsForCall []struct {
	}
	sizeReturns struct {
		result1 int
	}
	PutIndexStub        func(arg1 int, arg2 uint16)
	putIndexMutex       sync.RWMutex
	putIndexArgsForCall []struct {
		arg1 int
		arg2 uint16
	}
	IndexStub        func(arg1 int) (result1 uint16)
	indexMutex       sync.RWMutex
	indexArgsForCall []struct {
		arg1 int
	}
	indexReturns struct {
		result1 uint16
	}
}

var _ alias1.IndexArray = new(IndexArrayStub)

func (stub *IndexArrayStub) Size() int {
	stub.sizeMutex.Lock()
	defer stub.sizeMutex.Unlock()
	stub.sizeArgsForCall = append(stub.sizeArgsForCall, struct {
	}{})
	if stub.SizeStub != nil {
		return stub.SizeStub()
	} else {
		return stub.sizeReturns.result1
	}
}
func (stub *IndexArrayStub) SizeCallCount() int {
	stub.sizeMutex.RLock()
	defer stub.sizeMutex.RUnlock()
	return len(stub.sizeArgsForCall)
}
func (stub *IndexArrayStub) SizeReturns(result1 int) {
	stub.sizeMutex.Lock()
	defer stub.sizeMutex.Unlock()
	stub.sizeReturns = struct {
		result1 int
	}{result1}
}
func (stub *IndexArrayStub) PutIndex(arg1 int, arg2 uint16) {
	stub.putIndexMutex.Lock()
	defer stub.putIndexMutex.Unlock()
	stub.putIndexArgsForCall = append(stub.putIndexArgsForCall, struct {
		arg1 int
		arg2 uint16
	}{arg1, arg2})
	if stub.PutIndexStub != nil {
		stub.PutIndexStub(arg1, arg2)
	}
}
func (stub *IndexArrayStub) PutIndexCallCount() int {
	stub.putIndexMutex.RLock()
	defer stub.putIndexMutex.RUnlock()
	return len(stub.putIndexArgsForCall)
}
func (stub *IndexArrayStub) PutIndexArgsForCall(index int) (int, uint16) {
	stub.putIndexMutex.RLock()
	defer stub.putIndexMutex.RUnlock()
	return stub.putIndexArgsForCall[index].arg1, stub.putIndexArgsForCall[index].arg2
}
func (stub *IndexArrayStub) Index(arg1 int) uint16 {
	stub.indexMutex.Lock()
	defer stub.indexMutex.Unlock()
	stub.indexArgsForCall = append(stub.indexArgsForCall, struct {
		arg1 int
	}{arg1})
	if stub.IndexStub != nil {
		return stub.IndexStub(arg1)
	} else {
		return stub.indexReturns.result1
	}
}
func (stub *IndexArrayStub) IndexCallCount() int {
	stub.indexMutex.RLock()
	defer stub.indexMutex.RUnlock()
	return len(stub.indexArgsForCall)
}
func (stub *IndexArrayStub) IndexArgsForCall(index int) int {
	stub.indexMutex.RLock()
	defer stub.indexMutex.RUnlock()
	return stub.indexArgsForCall[index].arg1
}
func (stub *IndexArrayStub) IndexReturns(result1 uint16) {
	stub.indexMutex.Lock()
	defer stub.indexMutex.Unlock()
	stub.indexReturns = struct {
		result1 uint16
	}{result1}
}
