// This file was generated by counterfeiter
package shader_fakes

import (
	"sync"

	"github.com/momchil-atanasov/go-whiskey/graphics/shader"
)

type FakeProgram struct {
	VertexShaderStub        func() shader.RemoteShader
	vertexShaderMutex       sync.RWMutex
	vertexShaderArgsForCall []struct{}
	vertexShaderReturns struct {
		result1 shader.RemoteShader
	}
	FragmentShaderStub        func() shader.RemoteShader
	fragmentShaderMutex       sync.RWMutex
	fragmentShaderArgsForCall []struct{}
	fragmentShaderReturns struct {
		result1 shader.RemoteShader
	}
	RemoteStub        func() shader.RemoteProgram
	remoteMutex       sync.RWMutex
	remoteArgsForCall []struct{}
	remoteReturns struct {
		result1 shader.RemoteProgram
	}
}

func (fake *FakeProgram) VertexShader() shader.RemoteShader {
	fake.vertexShaderMutex.Lock()
	fake.vertexShaderArgsForCall = append(fake.vertexShaderArgsForCall, struct{}{})
	fake.vertexShaderMutex.Unlock()
	if fake.VertexShaderStub != nil {
		return fake.VertexShaderStub()
	} else {
		return fake.vertexShaderReturns.result1
	}
}

func (fake *FakeProgram) VertexShaderCallCount() int {
	fake.vertexShaderMutex.RLock()
	defer fake.vertexShaderMutex.RUnlock()
	return len(fake.vertexShaderArgsForCall)
}

func (fake *FakeProgram) VertexShaderReturns(result1 shader.RemoteShader) {
	fake.VertexShaderStub = nil
	fake.vertexShaderReturns = struct {
		result1 shader.RemoteShader
	}{result1}
}

func (fake *FakeProgram) FragmentShader() shader.RemoteShader {
	fake.fragmentShaderMutex.Lock()
	fake.fragmentShaderArgsForCall = append(fake.fragmentShaderArgsForCall, struct{}{})
	fake.fragmentShaderMutex.Unlock()
	if fake.FragmentShaderStub != nil {
		return fake.FragmentShaderStub()
	} else {
		return fake.fragmentShaderReturns.result1
	}
}

func (fake *FakeProgram) FragmentShaderCallCount() int {
	fake.fragmentShaderMutex.RLock()
	defer fake.fragmentShaderMutex.RUnlock()
	return len(fake.fragmentShaderArgsForCall)
}

func (fake *FakeProgram) FragmentShaderReturns(result1 shader.RemoteShader) {
	fake.FragmentShaderStub = nil
	fake.fragmentShaderReturns = struct {
		result1 shader.RemoteShader
	}{result1}
}

func (fake *FakeProgram) Remote() shader.RemoteProgram {
	fake.remoteMutex.Lock()
	fake.remoteArgsForCall = append(fake.remoteArgsForCall, struct{}{})
	fake.remoteMutex.Unlock()
	if fake.RemoteStub != nil {
		return fake.RemoteStub()
	} else {
		return fake.remoteReturns.result1
	}
}

func (fake *FakeProgram) RemoteCallCount() int {
	fake.remoteMutex.RLock()
	defer fake.remoteMutex.RUnlock()
	return len(fake.remoteArgsForCall)
}

func (fake *FakeProgram) RemoteReturns(result1 shader.RemoteProgram) {
	fake.RemoteStub = nil
	fake.remoteReturns = struct {
		result1 shader.RemoteProgram
	}{result1}
}

var _ shader.Program = new(FakeProgram)
