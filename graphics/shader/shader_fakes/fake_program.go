// This file was generated by counterfeiter
package shader_fakes

import (
	"sync"

	"github.com/momchil-atanasov/go-whiskey/graphics/client"
	"github.com/momchil-atanasov/go-whiskey/graphics/shader"
)

type FakeProgram struct {
	VertexShaderStub        func() shader.Shader
	vertexShaderMutex       sync.RWMutex
	vertexShaderArgsForCall []struct{}
	vertexShaderReturns struct {
		result1 shader.Shader
	}
	FragmentShaderStub        func() shader.Shader
	fragmentShaderMutex       sync.RWMutex
	fragmentShaderArgsForCall []struct{}
	fragmentShaderReturns struct {
		result1 shader.Shader
	}
	IdStub        func() client.ProgramId
	idMutex       sync.RWMutex
	idArgsForCall []struct{}
	idReturns struct {
		result1 client.ProgramId
	}
	UniformDeclarationsStub        func() []client.UniformDeclaration
	uniformDeclarationsMutex       sync.RWMutex
	uniformDeclarationsArgsForCall []struct{}
	uniformDeclarationsReturns struct {
		result1 []client.UniformDeclaration
	}
	UniformDeclarationStub        func(client.Uniform) (client.UniformDeclaration, bool)
	uniformDeclarationMutex       sync.RWMutex
	uniformDeclarationArgsForCall []struct {
		arg1 client.Uniform
	}
	uniformDeclarationReturns struct {
		result1 client.UniformDeclaration
		result2 bool
	}
	AttributeDeclarationsStub        func() []client.AttributeDeclaration
	attributeDeclarationsMutex       sync.RWMutex
	attributeDeclarationsArgsForCall []struct{}
	attributeDeclarationsReturns struct {
		result1 []client.AttributeDeclaration
	}
	AttributeDeclarationStub        func(client.Attribute) (client.AttributeDeclaration, bool)
	attributeDeclarationMutex       sync.RWMutex
	attributeDeclarationArgsForCall []struct {
		arg1 client.Attribute
	}
	attributeDeclarationReturns struct {
		result1 client.AttributeDeclaration
		result2 bool
	}
	CreatedStub        func() bool
	createdMutex       sync.RWMutex
	createdArgsForCall []struct{}
	createdReturns struct {
		result1 bool
	}
	CreateStub        func(client.ShaderClient) error
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 client.ShaderClient
	}
	createReturns struct {
		result1 error
	}
	DeleteStub        func(client.ShaderClient) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 client.ShaderClient
	}
	deleteReturns struct {
		result1 error
	}
}

func (fake *FakeProgram) VertexShader() shader.Shader {
	fake.vertexShaderMutex.Lock()
	fake.vertexShaderArgsForCall = append(fake.vertexShaderArgsForCall, struct{}{})
	fake.vertexShaderMutex.Unlock()
	if fake.VertexShaderStub != nil {
		return fake.VertexShaderStub()
	} else {
		return fake.vertexShaderReturns.result1
	}
}

func (fake *FakeProgram) VertexShaderCallCount() int {
	fake.vertexShaderMutex.RLock()
	defer fake.vertexShaderMutex.RUnlock()
	return len(fake.vertexShaderArgsForCall)
}

func (fake *FakeProgram) VertexShaderReturns(result1 shader.Shader) {
	fake.VertexShaderStub = nil
	fake.vertexShaderReturns = struct {
		result1 shader.Shader
	}{result1}
}

func (fake *FakeProgram) FragmentShader() shader.Shader {
	fake.fragmentShaderMutex.Lock()
	fake.fragmentShaderArgsForCall = append(fake.fragmentShaderArgsForCall, struct{}{})
	fake.fragmentShaderMutex.Unlock()
	if fake.FragmentShaderStub != nil {
		return fake.FragmentShaderStub()
	} else {
		return fake.fragmentShaderReturns.result1
	}
}

func (fake *FakeProgram) FragmentShaderCallCount() int {
	fake.fragmentShaderMutex.RLock()
	defer fake.fragmentShaderMutex.RUnlock()
	return len(fake.fragmentShaderArgsForCall)
}

func (fake *FakeProgram) FragmentShaderReturns(result1 shader.Shader) {
	fake.FragmentShaderStub = nil
	fake.fragmentShaderReturns = struct {
		result1 shader.Shader
	}{result1}
}

func (fake *FakeProgram) Id() client.ProgramId {
	fake.idMutex.Lock()
	fake.idArgsForCall = append(fake.idArgsForCall, struct{}{})
	fake.idMutex.Unlock()
	if fake.IdStub != nil {
		return fake.IdStub()
	} else {
		return fake.idReturns.result1
	}
}

func (fake *FakeProgram) IdCallCount() int {
	fake.idMutex.RLock()
	defer fake.idMutex.RUnlock()
	return len(fake.idArgsForCall)
}

func (fake *FakeProgram) IdReturns(result1 client.ProgramId) {
	fake.IdStub = nil
	fake.idReturns = struct {
		result1 client.ProgramId
	}{result1}
}

func (fake *FakeProgram) UniformDeclarations() []client.UniformDeclaration {
	fake.uniformDeclarationsMutex.Lock()
	fake.uniformDeclarationsArgsForCall = append(fake.uniformDeclarationsArgsForCall, struct{}{})
	fake.uniformDeclarationsMutex.Unlock()
	if fake.UniformDeclarationsStub != nil {
		return fake.UniformDeclarationsStub()
	} else {
		return fake.uniformDeclarationsReturns.result1
	}
}

func (fake *FakeProgram) UniformDeclarationsCallCount() int {
	fake.uniformDeclarationsMutex.RLock()
	defer fake.uniformDeclarationsMutex.RUnlock()
	return len(fake.uniformDeclarationsArgsForCall)
}

func (fake *FakeProgram) UniformDeclarationsReturns(result1 []client.UniformDeclaration) {
	fake.UniformDeclarationsStub = nil
	fake.uniformDeclarationsReturns = struct {
		result1 []client.UniformDeclaration
	}{result1}
}

func (fake *FakeProgram) UniformDeclaration(arg1 client.Uniform) (client.UniformDeclaration, bool) {
	fake.uniformDeclarationMutex.Lock()
	fake.uniformDeclarationArgsForCall = append(fake.uniformDeclarationArgsForCall, struct {
		arg1 client.Uniform
	}{arg1})
	fake.uniformDeclarationMutex.Unlock()
	if fake.UniformDeclarationStub != nil {
		return fake.UniformDeclarationStub(arg1)
	} else {
		return fake.uniformDeclarationReturns.result1, fake.uniformDeclarationReturns.result2
	}
}

func (fake *FakeProgram) UniformDeclarationCallCount() int {
	fake.uniformDeclarationMutex.RLock()
	defer fake.uniformDeclarationMutex.RUnlock()
	return len(fake.uniformDeclarationArgsForCall)
}

func (fake *FakeProgram) UniformDeclarationArgsForCall(i int) client.Uniform {
	fake.uniformDeclarationMutex.RLock()
	defer fake.uniformDeclarationMutex.RUnlock()
	return fake.uniformDeclarationArgsForCall[i].arg1
}

func (fake *FakeProgram) UniformDeclarationReturns(result1 client.UniformDeclaration, result2 bool) {
	fake.UniformDeclarationStub = nil
	fake.uniformDeclarationReturns = struct {
		result1 client.UniformDeclaration
		result2 bool
	}{result1, result2}
}

func (fake *FakeProgram) AttributeDeclarations() []client.AttributeDeclaration {
	fake.attributeDeclarationsMutex.Lock()
	fake.attributeDeclarationsArgsForCall = append(fake.attributeDeclarationsArgsForCall, struct{}{})
	fake.attributeDeclarationsMutex.Unlock()
	if fake.AttributeDeclarationsStub != nil {
		return fake.AttributeDeclarationsStub()
	} else {
		return fake.attributeDeclarationsReturns.result1
	}
}

func (fake *FakeProgram) AttributeDeclarationsCallCount() int {
	fake.attributeDeclarationsMutex.RLock()
	defer fake.attributeDeclarationsMutex.RUnlock()
	return len(fake.attributeDeclarationsArgsForCall)
}

func (fake *FakeProgram) AttributeDeclarationsReturns(result1 []client.AttributeDeclaration) {
	fake.AttributeDeclarationsStub = nil
	fake.attributeDeclarationsReturns = struct {
		result1 []client.AttributeDeclaration
	}{result1}
}

func (fake *FakeProgram) AttributeDeclaration(arg1 client.Attribute) (client.AttributeDeclaration, bool) {
	fake.attributeDeclarationMutex.Lock()
	fake.attributeDeclarationArgsForCall = append(fake.attributeDeclarationArgsForCall, struct {
		arg1 client.Attribute
	}{arg1})
	fake.attributeDeclarationMutex.Unlock()
	if fake.AttributeDeclarationStub != nil {
		return fake.AttributeDeclarationStub(arg1)
	} else {
		return fake.attributeDeclarationReturns.result1, fake.attributeDeclarationReturns.result2
	}
}

func (fake *FakeProgram) AttributeDeclarationCallCount() int {
	fake.attributeDeclarationMutex.RLock()
	defer fake.attributeDeclarationMutex.RUnlock()
	return len(fake.attributeDeclarationArgsForCall)
}

func (fake *FakeProgram) AttributeDeclarationArgsForCall(i int) client.Attribute {
	fake.attributeDeclarationMutex.RLock()
	defer fake.attributeDeclarationMutex.RUnlock()
	return fake.attributeDeclarationArgsForCall[i].arg1
}

func (fake *FakeProgram) AttributeDeclarationReturns(result1 client.AttributeDeclaration, result2 bool) {
	fake.AttributeDeclarationStub = nil
	fake.attributeDeclarationReturns = struct {
		result1 client.AttributeDeclaration
		result2 bool
	}{result1, result2}
}

func (fake *FakeProgram) Created() bool {
	fake.createdMutex.Lock()
	fake.createdArgsForCall = append(fake.createdArgsForCall, struct{}{})
	fake.createdMutex.Unlock()
	if fake.CreatedStub != nil {
		return fake.CreatedStub()
	} else {
		return fake.createdReturns.result1
	}
}

func (fake *FakeProgram) CreatedCallCount() int {
	fake.createdMutex.RLock()
	defer fake.createdMutex.RUnlock()
	return len(fake.createdArgsForCall)
}

func (fake *FakeProgram) CreatedReturns(result1 bool) {
	fake.CreatedStub = nil
	fake.createdReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeProgram) Create(arg1 client.ShaderClient) error {
	fake.createMutex.Lock()
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 client.ShaderClient
	}{arg1})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(arg1)
	} else {
		return fake.createReturns.result1
	}
}

func (fake *FakeProgram) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeProgram) CreateArgsForCall(i int) client.ShaderClient {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].arg1
}

func (fake *FakeProgram) CreateReturns(result1 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeProgram) Delete(arg1 client.ShaderClient) error {
	fake.deleteMutex.Lock()
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 client.ShaderClient
	}{arg1})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(arg1)
	} else {
		return fake.deleteReturns.result1
	}
}

func (fake *FakeProgram) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeProgram) DeleteArgsForCall(i int) client.ShaderClient {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return fake.deleteArgsForCall[i].arg1
}

func (fake *FakeProgram) DeleteReturns(result1 error) {
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

var _ shader.Program = new(FakeProgram)
