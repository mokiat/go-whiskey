// This file was generated by counterfeiter
package ecs_fakes

import (
	"sync"

	"github.com/momchil-atanasov/go-whiskey/ecs"
)

type FakeEntityManager struct {
	CreateEntityStub        func() ecs.Entity
	createEntityMutex       sync.RWMutex
	createEntityArgsForCall []struct{}
	createEntityReturns struct {
		result1 ecs.Entity
	}
	HasEntityStub        func(ecs.Entity) bool
	hasEntityMutex       sync.RWMutex
	hasEntityArgsForCall []struct {
		arg1 ecs.Entity
	}
	hasEntityReturns struct {
		result1 bool
	}
	DeleteEntityStub        func(ecs.Entity)
	deleteEntityMutex       sync.RWMutex
	deleteEntityArgsForCall []struct {
		arg1 ecs.Entity
	}
	DeleteAllEntitiesStub        func()
	deleteAllEntitiesMutex       sync.RWMutex
	deleteAllEntitiesArgsForCall []struct{}
	AddEntityComponentStub        func(ecs.Entity, ecs.ComponentType, interface{})
	addEntityComponentMutex       sync.RWMutex
	addEntityComponentArgsForCall []struct {
		arg1 ecs.Entity
		arg2 ecs.ComponentType
		arg3 interface{}
	}
	EntityHasComponentStub        func(ecs.Entity, ecs.ComponentType) bool
	entityHasComponentMutex       sync.RWMutex
	entityHasComponentArgsForCall []struct {
		arg1 ecs.Entity
		arg2 ecs.ComponentType
	}
	entityHasComponentReturns struct {
		result1 bool
	}
	EntityComponentStub        func(ecs.Entity, ecs.ComponentType) interface{}
	entityComponentMutex       sync.RWMutex
	entityComponentArgsForCall []struct {
		arg1 ecs.Entity
		arg2 ecs.ComponentType
	}
	entityComponentReturns struct {
		result1 interface{}
	}
	RemoveEntityComponentStub        func(ecs.Entity, ecs.ComponentType)
	removeEntityComponentMutex       sync.RWMutex
	removeEntityComponentArgsForCall []struct {
		arg1 ecs.Entity
		arg2 ecs.ComponentType
	}
}

func (fake *FakeEntityManager) CreateEntity() ecs.Entity {
	fake.createEntityMutex.Lock()
	fake.createEntityArgsForCall = append(fake.createEntityArgsForCall, struct{}{})
	fake.createEntityMutex.Unlock()
	if fake.CreateEntityStub != nil {
		return fake.CreateEntityStub()
	} else {
		return fake.createEntityReturns.result1
	}
}

func (fake *FakeEntityManager) CreateEntityCallCount() int {
	fake.createEntityMutex.RLock()
	defer fake.createEntityMutex.RUnlock()
	return len(fake.createEntityArgsForCall)
}

func (fake *FakeEntityManager) CreateEntityReturns(result1 ecs.Entity) {
	fake.CreateEntityStub = nil
	fake.createEntityReturns = struct {
		result1 ecs.Entity
	}{result1}
}

func (fake *FakeEntityManager) HasEntity(arg1 ecs.Entity) bool {
	fake.hasEntityMutex.Lock()
	fake.hasEntityArgsForCall = append(fake.hasEntityArgsForCall, struct {
		arg1 ecs.Entity
	}{arg1})
	fake.hasEntityMutex.Unlock()
	if fake.HasEntityStub != nil {
		return fake.HasEntityStub(arg1)
	} else {
		return fake.hasEntityReturns.result1
	}
}

func (fake *FakeEntityManager) HasEntityCallCount() int {
	fake.hasEntityMutex.RLock()
	defer fake.hasEntityMutex.RUnlock()
	return len(fake.hasEntityArgsForCall)
}

func (fake *FakeEntityManager) HasEntityArgsForCall(i int) ecs.Entity {
	fake.hasEntityMutex.RLock()
	defer fake.hasEntityMutex.RUnlock()
	return fake.hasEntityArgsForCall[i].arg1
}

func (fake *FakeEntityManager) HasEntityReturns(result1 bool) {
	fake.HasEntityStub = nil
	fake.hasEntityReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeEntityManager) DeleteEntity(arg1 ecs.Entity) {
	fake.deleteEntityMutex.Lock()
	fake.deleteEntityArgsForCall = append(fake.deleteEntityArgsForCall, struct {
		arg1 ecs.Entity
	}{arg1})
	fake.deleteEntityMutex.Unlock()
	if fake.DeleteEntityStub != nil {
		fake.DeleteEntityStub(arg1)
	}
}

func (fake *FakeEntityManager) DeleteEntityCallCount() int {
	fake.deleteEntityMutex.RLock()
	defer fake.deleteEntityMutex.RUnlock()
	return len(fake.deleteEntityArgsForCall)
}

func (fake *FakeEntityManager) DeleteEntityArgsForCall(i int) ecs.Entity {
	fake.deleteEntityMutex.RLock()
	defer fake.deleteEntityMutex.RUnlock()
	return fake.deleteEntityArgsForCall[i].arg1
}

func (fake *FakeEntityManager) DeleteAllEntities() {
	fake.deleteAllEntitiesMutex.Lock()
	fake.deleteAllEntitiesArgsForCall = append(fake.deleteAllEntitiesArgsForCall, struct{}{})
	fake.deleteAllEntitiesMutex.Unlock()
	if fake.DeleteAllEntitiesStub != nil {
		fake.DeleteAllEntitiesStub()
	}
}

func (fake *FakeEntityManager) DeleteAllEntitiesCallCount() int {
	fake.deleteAllEntitiesMutex.RLock()
	defer fake.deleteAllEntitiesMutex.RUnlock()
	return len(fake.deleteAllEntitiesArgsForCall)
}

func (fake *FakeEntityManager) AddEntityComponent(arg1 ecs.Entity, arg2 ecs.ComponentType, arg3 interface{}) {
	fake.addEntityComponentMutex.Lock()
	fake.addEntityComponentArgsForCall = append(fake.addEntityComponentArgsForCall, struct {
		arg1 ecs.Entity
		arg2 ecs.ComponentType
		arg3 interface{}
	}{arg1, arg2, arg3})
	fake.addEntityComponentMutex.Unlock()
	if fake.AddEntityComponentStub != nil {
		fake.AddEntityComponentStub(arg1, arg2, arg3)
	}
}

func (fake *FakeEntityManager) AddEntityComponentCallCount() int {
	fake.addEntityComponentMutex.RLock()
	defer fake.addEntityComponentMutex.RUnlock()
	return len(fake.addEntityComponentArgsForCall)
}

func (fake *FakeEntityManager) AddEntityComponentArgsForCall(i int) (ecs.Entity, ecs.ComponentType, interface{}) {
	fake.addEntityComponentMutex.RLock()
	defer fake.addEntityComponentMutex.RUnlock()
	return fake.addEntityComponentArgsForCall[i].arg1, fake.addEntityComponentArgsForCall[i].arg2, fake.addEntityComponentArgsForCall[i].arg3
}

func (fake *FakeEntityManager) EntityHasComponent(arg1 ecs.Entity, arg2 ecs.ComponentType) bool {
	fake.entityHasComponentMutex.Lock()
	fake.entityHasComponentArgsForCall = append(fake.entityHasComponentArgsForCall, struct {
		arg1 ecs.Entity
		arg2 ecs.ComponentType
	}{arg1, arg2})
	fake.entityHasComponentMutex.Unlock()
	if fake.EntityHasComponentStub != nil {
		return fake.EntityHasComponentStub(arg1, arg2)
	} else {
		return fake.entityHasComponentReturns.result1
	}
}

func (fake *FakeEntityManager) EntityHasComponentCallCount() int {
	fake.entityHasComponentMutex.RLock()
	defer fake.entityHasComponentMutex.RUnlock()
	return len(fake.entityHasComponentArgsForCall)
}

func (fake *FakeEntityManager) EntityHasComponentArgsForCall(i int) (ecs.Entity, ecs.ComponentType) {
	fake.entityHasComponentMutex.RLock()
	defer fake.entityHasComponentMutex.RUnlock()
	return fake.entityHasComponentArgsForCall[i].arg1, fake.entityHasComponentArgsForCall[i].arg2
}

func (fake *FakeEntityManager) EntityHasComponentReturns(result1 bool) {
	fake.EntityHasComponentStub = nil
	fake.entityHasComponentReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeEntityManager) EntityComponent(arg1 ecs.Entity, arg2 ecs.ComponentType) interface{} {
	fake.entityComponentMutex.Lock()
	fake.entityComponentArgsForCall = append(fake.entityComponentArgsForCall, struct {
		arg1 ecs.Entity
		arg2 ecs.ComponentType
	}{arg1, arg2})
	fake.entityComponentMutex.Unlock()
	if fake.EntityComponentStub != nil {
		return fake.EntityComponentStub(arg1, arg2)
	} else {
		return fake.entityComponentReturns.result1
	}
}

func (fake *FakeEntityManager) EntityComponentCallCount() int {
	fake.entityComponentMutex.RLock()
	defer fake.entityComponentMutex.RUnlock()
	return len(fake.entityComponentArgsForCall)
}

func (fake *FakeEntityManager) EntityComponentArgsForCall(i int) (ecs.Entity, ecs.ComponentType) {
	fake.entityComponentMutex.RLock()
	defer fake.entityComponentMutex.RUnlock()
	return fake.entityComponentArgsForCall[i].arg1, fake.entityComponentArgsForCall[i].arg2
}

func (fake *FakeEntityManager) EntityComponentReturns(result1 interface{}) {
	fake.EntityComponentStub = nil
	fake.entityComponentReturns = struct {
		result1 interface{}
	}{result1}
}

func (fake *FakeEntityManager) RemoveEntityComponent(arg1 ecs.Entity, arg2 ecs.ComponentType) {
	fake.removeEntityComponentMutex.Lock()
	fake.removeEntityComponentArgsForCall = append(fake.removeEntityComponentArgsForCall, struct {
		arg1 ecs.Entity
		arg2 ecs.ComponentType
	}{arg1, arg2})
	fake.removeEntityComponentMutex.Unlock()
	if fake.RemoveEntityComponentStub != nil {
		fake.RemoveEntityComponentStub(arg1, arg2)
	}
}

func (fake *FakeEntityManager) RemoveEntityComponentCallCount() int {
	fake.removeEntityComponentMutex.RLock()
	defer fake.removeEntityComponentMutex.RUnlock()
	return len(fake.removeEntityComponentArgsForCall)
}

func (fake *FakeEntityManager) RemoveEntityComponentArgsForCall(i int) (ecs.Entity, ecs.ComponentType) {
	fake.removeEntityComponentMutex.RLock()
	defer fake.removeEntityComponentMutex.RUnlock()
	return fake.removeEntityComponentArgsForCall[i].arg1, fake.removeEntityComponentArgsForCall[i].arg2
}

var _ ecs.EntityManager = new(FakeEntityManager)
