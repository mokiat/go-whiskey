// Generated by 'github.com/mokiat/gostub'

package graphics_stubs

import (
	sync "sync"

	alias1 "github.com/mokiat/go-whiskey/graphics"
	alias2 "github.com/mokiat/go-whiskey/math"
)

type Float4x4UniformStub struct {
	StubGUID            int
	SetValueStub        func(arg1 alias2.Mat4x4)
	setValueMutex       sync.RWMutex
	setValueArgsForCall []struct {
		arg1 alias2.Mat4x4
	}
	ValueStub        func() (result1 alias2.Mat4x4)
	valueMutex       sync.RWMutex
	valueArgsForCall []struct {
	}
	valueReturns struct {
		result1 alias2.Mat4x4
	}
}

var _ alias1.Float4x4Uniform = new(Float4x4UniformStub)

func (stub *Float4x4UniformStub) SetValue(arg1 alias2.Mat4x4) {
	stub.setValueMutex.Lock()
	defer stub.setValueMutex.Unlock()
	stub.setValueArgsForCall = append(stub.setValueArgsForCall, struct {
		arg1 alias2.Mat4x4
	}{arg1})
	if stub.SetValueStub != nil {
		stub.SetValueStub(arg1)
	}
}
func (stub *Float4x4UniformStub) SetValueCallCount() int {
	stub.setValueMutex.RLock()
	defer stub.setValueMutex.RUnlock()
	return len(stub.setValueArgsForCall)
}
func (stub *Float4x4UniformStub) SetValueArgsForCall(index int) alias2.Mat4x4 {
	stub.setValueMutex.RLock()
	defer stub.setValueMutex.RUnlock()
	return stub.setValueArgsForCall[index].arg1
}
func (stub *Float4x4UniformStub) Value() alias2.Mat4x4 {
	stub.valueMutex.Lock()
	defer stub.valueMutex.Unlock()
	stub.valueArgsForCall = append(stub.valueArgsForCall, struct {
	}{})
	if stub.ValueStub != nil {
		return stub.ValueStub()
	} else {
		return stub.valueReturns.result1
	}
}
func (stub *Float4x4UniformStub) ValueCallCount() int {
	stub.valueMutex.RLock()
	defer stub.valueMutex.RUnlock()
	return len(stub.valueArgsForCall)
}
func (stub *Float4x4UniformStub) ValueReturns(result1 alias2.Mat4x4) {
	stub.valueMutex.Lock()
	defer stub.valueMutex.Unlock()
	stub.valueReturns = struct {
		result1 alias2.Mat4x4
	}{result1}
}
