// This file was generated by counterfeiter
package client_fakes

import (
	"sync"

	"github.com/momchil-atanasov/go-whiskey/graphics/client"
)

type FakeGraphicsClient struct {
	CreateVertexShaderStub        func() (client.ShaderId, error)
	createVertexShaderMutex       sync.RWMutex
	createVertexShaderArgsForCall []struct{}
	createVertexShaderReturns struct {
		result1 client.ShaderId
		result2 error
	}
	CreateFragmentShaderStub        func() (client.ShaderId, error)
	createFragmentShaderMutex       sync.RWMutex
	createFragmentShaderArgsForCall []struct{}
	createFragmentShaderReturns struct {
		result1 client.ShaderId
		result2 error
	}
	SetShaderSourceCodeStub        func(id client.ShaderId, sourceCode string) error
	setShaderSourceCodeMutex       sync.RWMutex
	setShaderSourceCodeArgsForCall []struct {
		id         client.ShaderId
		sourceCode string
	}
	setShaderSourceCodeReturns struct {
		result1 error
	}
	CompileShaderStub        func(id client.ShaderId) error
	compileShaderMutex       sync.RWMutex
	compileShaderArgsForCall []struct {
		id client.ShaderId
	}
	compileShaderReturns struct {
		result1 error
	}
	DeleteShaderStub        func(id client.ShaderId) error
	deleteShaderMutex       sync.RWMutex
	deleteShaderArgsForCall []struct {
		id client.ShaderId
	}
	deleteShaderReturns struct {
		result1 error
	}
	CreateProgramStub        func() (client.ProgramId, error)
	createProgramMutex       sync.RWMutex
	createProgramArgsForCall []struct{}
	createProgramReturns struct {
		result1 client.ProgramId
		result2 error
	}
	AttachShaderToProgramStub        func(shaderId client.ShaderId, programId client.ProgramId) error
	attachShaderToProgramMutex       sync.RWMutex
	attachShaderToProgramArgsForCall []struct {
		shaderId  client.ShaderId
		programId client.ProgramId
	}
	attachShaderToProgramReturns struct {
		result1 error
	}
	LinkProgramStub        func(client.ProgramId) error
	linkProgramMutex       sync.RWMutex
	linkProgramArgsForCall []struct {
		arg1 client.ProgramId
	}
	linkProgramReturns struct {
		result1 error
	}
	UseProgramStub        func(client.ProgramId) error
	useProgramMutex       sync.RWMutex
	useProgramArgsForCall []struct {
		arg1 client.ProgramId
	}
	useProgramReturns struct {
		result1 error
	}
	DeleteProgramStub        func(client.ProgramId) error
	deleteProgramMutex       sync.RWMutex
	deleteProgramArgsForCall []struct {
		arg1 client.ProgramId
	}
	deleteProgramReturns struct {
		result1 error
	}
	CreateBufferStub        func() (client.BufferId, error)
	createBufferMutex       sync.RWMutex
	createBufferArgsForCall []struct{}
	createBufferReturns struct {
		result1 client.BufferId
		result2 error
	}
	BindVertexBufferStub        func(id client.BufferId) error
	bindVertexBufferMutex       sync.RWMutex
	bindVertexBufferArgsForCall []struct {
		id client.BufferId
	}
	bindVertexBufferReturns struct {
		result1 error
	}
	BindIndexBufferStub        func(id client.BufferId) error
	bindIndexBufferMutex       sync.RWMutex
	bindIndexBufferArgsForCall []struct {
		id client.BufferId
	}
	bindIndexBufferReturns struct {
		result1 error
	}
	CreateVertexBufferDataStub        func(data []byte, usage client.BufferUsage) error
	createVertexBufferDataMutex       sync.RWMutex
	createVertexBufferDataArgsForCall []struct {
		data  []byte
		usage client.BufferUsage
	}
	createVertexBufferDataReturns struct {
		result1 error
	}
	CreateIndexBufferDataStub        func(data []byte, usage client.BufferUsage) error
	createIndexBufferDataMutex       sync.RWMutex
	createIndexBufferDataArgsForCall []struct {
		data  []byte
		usage client.BufferUsage
	}
	createIndexBufferDataReturns struct {
		result1 error
	}
	DeleteBufferStub        func(bufferId client.BufferId) error
	deleteBufferMutex       sync.RWMutex
	deleteBufferArgsForCall []struct {
		bufferId client.BufferId
	}
	deleteBufferReturns struct {
		result1 error
	}
	EnableAttributeStub        func(location client.AttributeLocation) error
	enableAttributeMutex       sync.RWMutex
	enableAttributeArgsForCall []struct {
		location client.AttributeLocation
	}
	enableAttributeReturns struct {
		result1 error
	}
	DisableAttributeStub        func(location client.AttributeLocation) error
	disableAttributeMutex       sync.RWMutex
	disableAttributeArgsForCall []struct {
		location client.AttributeLocation
	}
	disableAttributeReturns struct {
		result1 error
	}
	ConfigureAttributeStub        func(location client.AttributeLocation, components, strideInBytes, offsetInBytes int) error
	configureAttributeMutex       sync.RWMutex
	configureAttributeArgsForCall []struct {
		location      client.AttributeLocation
		components    int
		strideInBytes int
		offsetInBytes int
	}
	configureAttributeReturns struct {
		result1 error
	}
	SetVec4UniformStub        func(client.UniformLocation, []float32) error
	setVec4UniformMutex       sync.RWMutex
	setVec4UniformArgsForCall []struct {
		arg1 client.UniformLocation
		arg2 []float32
	}
	setVec4UniformReturns struct {
		result1 error
	}
	SetMat4x4UniformStub        func(client.UniformLocation, []float32) error
	setMat4x4UniformMutex       sync.RWMutex
	setMat4x4UniformArgsForCall []struct {
		arg1 client.UniformLocation
		arg2 []float32
	}
	setMat4x4UniformReturns struct {
		result1 error
	}
	SetSamplerUniformStub        func(client.UniformLocation, int) error
	setSamplerUniformMutex       sync.RWMutex
	setSamplerUniformArgsForCall []struct {
		arg1 client.UniformLocation
		arg2 int
	}
	setSamplerUniformReturns struct {
		result1 error
	}
	Bind2DTextureStub        func(channel int, textureId client.TextureId) error
	bind2DTextureMutex       sync.RWMutex
	bind2DTextureArgsForCall []struct {
		channel   int
		textureId client.TextureId
	}
	bind2DTextureReturns struct {
		result1 error
	}
	BindCubeTextureStub        func(channel int, textureId client.TextureId) error
	bindCubeTextureMutex       sync.RWMutex
	bindCubeTextureArgsForCall []struct {
		channel   int
		textureId client.TextureId
	}
	bindCubeTextureReturns struct {
		result1 error
	}
	DrawTrianglesStub        func(indexCount, indexOffsetInBytes int) error
	drawTrianglesMutex       sync.RWMutex
	drawTrianglesArgsForCall []struct {
		indexCount         int
		indexOffsetInBytes int
	}
	drawTrianglesReturns struct {
		result1 error
	}
	DrawLinesStub        func(indexCount, indexOffsetInBytes int) error
	drawLinesMutex       sync.RWMutex
	drawLinesArgsForCall []struct {
		indexCount         int
		indexOffsetInBytes int
	}
	drawLinesReturns struct {
		result1 error
	}
}

func (fake *FakeGraphicsClient) CreateVertexShader() (client.ShaderId, error) {
	fake.createVertexShaderMutex.Lock()
	fake.createVertexShaderArgsForCall = append(fake.createVertexShaderArgsForCall, struct{}{})
	fake.createVertexShaderMutex.Unlock()
	if fake.CreateVertexShaderStub != nil {
		return fake.CreateVertexShaderStub()
	} else {
		return fake.createVertexShaderReturns.result1, fake.createVertexShaderReturns.result2
	}
}

func (fake *FakeGraphicsClient) CreateVertexShaderCallCount() int {
	fake.createVertexShaderMutex.RLock()
	defer fake.createVertexShaderMutex.RUnlock()
	return len(fake.createVertexShaderArgsForCall)
}

func (fake *FakeGraphicsClient) CreateVertexShaderReturns(result1 client.ShaderId, result2 error) {
	fake.CreateVertexShaderStub = nil
	fake.createVertexShaderReturns = struct {
		result1 client.ShaderId
		result2 error
	}{result1, result2}
}

func (fake *FakeGraphicsClient) CreateFragmentShader() (client.ShaderId, error) {
	fake.createFragmentShaderMutex.Lock()
	fake.createFragmentShaderArgsForCall = append(fake.createFragmentShaderArgsForCall, struct{}{})
	fake.createFragmentShaderMutex.Unlock()
	if fake.CreateFragmentShaderStub != nil {
		return fake.CreateFragmentShaderStub()
	} else {
		return fake.createFragmentShaderReturns.result1, fake.createFragmentShaderReturns.result2
	}
}

func (fake *FakeGraphicsClient) CreateFragmentShaderCallCount() int {
	fake.createFragmentShaderMutex.RLock()
	defer fake.createFragmentShaderMutex.RUnlock()
	return len(fake.createFragmentShaderArgsForCall)
}

func (fake *FakeGraphicsClient) CreateFragmentShaderReturns(result1 client.ShaderId, result2 error) {
	fake.CreateFragmentShaderStub = nil
	fake.createFragmentShaderReturns = struct {
		result1 client.ShaderId
		result2 error
	}{result1, result2}
}

func (fake *FakeGraphicsClient) SetShaderSourceCode(id client.ShaderId, sourceCode string) error {
	fake.setShaderSourceCodeMutex.Lock()
	fake.setShaderSourceCodeArgsForCall = append(fake.setShaderSourceCodeArgsForCall, struct {
		id         client.ShaderId
		sourceCode string
	}{id, sourceCode})
	fake.setShaderSourceCodeMutex.Unlock()
	if fake.SetShaderSourceCodeStub != nil {
		return fake.SetShaderSourceCodeStub(id, sourceCode)
	} else {
		return fake.setShaderSourceCodeReturns.result1
	}
}

func (fake *FakeGraphicsClient) SetShaderSourceCodeCallCount() int {
	fake.setShaderSourceCodeMutex.RLock()
	defer fake.setShaderSourceCodeMutex.RUnlock()
	return len(fake.setShaderSourceCodeArgsForCall)
}

func (fake *FakeGraphicsClient) SetShaderSourceCodeArgsForCall(i int) (client.ShaderId, string) {
	fake.setShaderSourceCodeMutex.RLock()
	defer fake.setShaderSourceCodeMutex.RUnlock()
	return fake.setShaderSourceCodeArgsForCall[i].id, fake.setShaderSourceCodeArgsForCall[i].sourceCode
}

func (fake *FakeGraphicsClient) SetShaderSourceCodeReturns(result1 error) {
	fake.SetShaderSourceCodeStub = nil
	fake.setShaderSourceCodeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGraphicsClient) CompileShader(id client.ShaderId) error {
	fake.compileShaderMutex.Lock()
	fake.compileShaderArgsForCall = append(fake.compileShaderArgsForCall, struct {
		id client.ShaderId
	}{id})
	fake.compileShaderMutex.Unlock()
	if fake.CompileShaderStub != nil {
		return fake.CompileShaderStub(id)
	} else {
		return fake.compileShaderReturns.result1
	}
}

func (fake *FakeGraphicsClient) CompileShaderCallCount() int {
	fake.compileShaderMutex.RLock()
	defer fake.compileShaderMutex.RUnlock()
	return len(fake.compileShaderArgsForCall)
}

func (fake *FakeGraphicsClient) CompileShaderArgsForCall(i int) client.ShaderId {
	fake.compileShaderMutex.RLock()
	defer fake.compileShaderMutex.RUnlock()
	return fake.compileShaderArgsForCall[i].id
}

func (fake *FakeGraphicsClient) CompileShaderReturns(result1 error) {
	fake.CompileShaderStub = nil
	fake.compileShaderReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGraphicsClient) DeleteShader(id client.ShaderId) error {
	fake.deleteShaderMutex.Lock()
	fake.deleteShaderArgsForCall = append(fake.deleteShaderArgsForCall, struct {
		id client.ShaderId
	}{id})
	fake.deleteShaderMutex.Unlock()
	if fake.DeleteShaderStub != nil {
		return fake.DeleteShaderStub(id)
	} else {
		return fake.deleteShaderReturns.result1
	}
}

func (fake *FakeGraphicsClient) DeleteShaderCallCount() int {
	fake.deleteShaderMutex.RLock()
	defer fake.deleteShaderMutex.RUnlock()
	return len(fake.deleteShaderArgsForCall)
}

func (fake *FakeGraphicsClient) DeleteShaderArgsForCall(i int) client.ShaderId {
	fake.deleteShaderMutex.RLock()
	defer fake.deleteShaderMutex.RUnlock()
	return fake.deleteShaderArgsForCall[i].id
}

func (fake *FakeGraphicsClient) DeleteShaderReturns(result1 error) {
	fake.DeleteShaderStub = nil
	fake.deleteShaderReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGraphicsClient) CreateProgram() (client.ProgramId, error) {
	fake.createProgramMutex.Lock()
	fake.createProgramArgsForCall = append(fake.createProgramArgsForCall, struct{}{})
	fake.createProgramMutex.Unlock()
	if fake.CreateProgramStub != nil {
		return fake.CreateProgramStub()
	} else {
		return fake.createProgramReturns.result1, fake.createProgramReturns.result2
	}
}

func (fake *FakeGraphicsClient) CreateProgramCallCount() int {
	fake.createProgramMutex.RLock()
	defer fake.createProgramMutex.RUnlock()
	return len(fake.createProgramArgsForCall)
}

func (fake *FakeGraphicsClient) CreateProgramReturns(result1 client.ProgramId, result2 error) {
	fake.CreateProgramStub = nil
	fake.createProgramReturns = struct {
		result1 client.ProgramId
		result2 error
	}{result1, result2}
}

func (fake *FakeGraphicsClient) AttachShaderToProgram(shaderId client.ShaderId, programId client.ProgramId) error {
	fake.attachShaderToProgramMutex.Lock()
	fake.attachShaderToProgramArgsForCall = append(fake.attachShaderToProgramArgsForCall, struct {
		shaderId  client.ShaderId
		programId client.ProgramId
	}{shaderId, programId})
	fake.attachShaderToProgramMutex.Unlock()
	if fake.AttachShaderToProgramStub != nil {
		return fake.AttachShaderToProgramStub(shaderId, programId)
	} else {
		return fake.attachShaderToProgramReturns.result1
	}
}

func (fake *FakeGraphicsClient) AttachShaderToProgramCallCount() int {
	fake.attachShaderToProgramMutex.RLock()
	defer fake.attachShaderToProgramMutex.RUnlock()
	return len(fake.attachShaderToProgramArgsForCall)
}

func (fake *FakeGraphicsClient) AttachShaderToProgramArgsForCall(i int) (client.ShaderId, client.ProgramId) {
	fake.attachShaderToProgramMutex.RLock()
	defer fake.attachShaderToProgramMutex.RUnlock()
	return fake.attachShaderToProgramArgsForCall[i].shaderId, fake.attachShaderToProgramArgsForCall[i].programId
}

func (fake *FakeGraphicsClient) AttachShaderToProgramReturns(result1 error) {
	fake.AttachShaderToProgramStub = nil
	fake.attachShaderToProgramReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGraphicsClient) LinkProgram(arg1 client.ProgramId) error {
	fake.linkProgramMutex.Lock()
	fake.linkProgramArgsForCall = append(fake.linkProgramArgsForCall, struct {
		arg1 client.ProgramId
	}{arg1})
	fake.linkProgramMutex.Unlock()
	if fake.LinkProgramStub != nil {
		return fake.LinkProgramStub(arg1)
	} else {
		return fake.linkProgramReturns.result1
	}
}

func (fake *FakeGraphicsClient) LinkProgramCallCount() int {
	fake.linkProgramMutex.RLock()
	defer fake.linkProgramMutex.RUnlock()
	return len(fake.linkProgramArgsForCall)
}

func (fake *FakeGraphicsClient) LinkProgramArgsForCall(i int) client.ProgramId {
	fake.linkProgramMutex.RLock()
	defer fake.linkProgramMutex.RUnlock()
	return fake.linkProgramArgsForCall[i].arg1
}

func (fake *FakeGraphicsClient) LinkProgramReturns(result1 error) {
	fake.LinkProgramStub = nil
	fake.linkProgramReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGraphicsClient) UseProgram(arg1 client.ProgramId) error {
	fake.useProgramMutex.Lock()
	fake.useProgramArgsForCall = append(fake.useProgramArgsForCall, struct {
		arg1 client.ProgramId
	}{arg1})
	fake.useProgramMutex.Unlock()
	if fake.UseProgramStub != nil {
		return fake.UseProgramStub(arg1)
	} else {
		return fake.useProgramReturns.result1
	}
}

func (fake *FakeGraphicsClient) UseProgramCallCount() int {
	fake.useProgramMutex.RLock()
	defer fake.useProgramMutex.RUnlock()
	return len(fake.useProgramArgsForCall)
}

func (fake *FakeGraphicsClient) UseProgramArgsForCall(i int) client.ProgramId {
	fake.useProgramMutex.RLock()
	defer fake.useProgramMutex.RUnlock()
	return fake.useProgramArgsForCall[i].arg1
}

func (fake *FakeGraphicsClient) UseProgramReturns(result1 error) {
	fake.UseProgramStub = nil
	fake.useProgramReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGraphicsClient) DeleteProgram(arg1 client.ProgramId) error {
	fake.deleteProgramMutex.Lock()
	fake.deleteProgramArgsForCall = append(fake.deleteProgramArgsForCall, struct {
		arg1 client.ProgramId
	}{arg1})
	fake.deleteProgramMutex.Unlock()
	if fake.DeleteProgramStub != nil {
		return fake.DeleteProgramStub(arg1)
	} else {
		return fake.deleteProgramReturns.result1
	}
}

func (fake *FakeGraphicsClient) DeleteProgramCallCount() int {
	fake.deleteProgramMutex.RLock()
	defer fake.deleteProgramMutex.RUnlock()
	return len(fake.deleteProgramArgsForCall)
}

func (fake *FakeGraphicsClient) DeleteProgramArgsForCall(i int) client.ProgramId {
	fake.deleteProgramMutex.RLock()
	defer fake.deleteProgramMutex.RUnlock()
	return fake.deleteProgramArgsForCall[i].arg1
}

func (fake *FakeGraphicsClient) DeleteProgramReturns(result1 error) {
	fake.DeleteProgramStub = nil
	fake.deleteProgramReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGraphicsClient) CreateBuffer() (client.BufferId, error) {
	fake.createBufferMutex.Lock()
	fake.createBufferArgsForCall = append(fake.createBufferArgsForCall, struct{}{})
	fake.createBufferMutex.Unlock()
	if fake.CreateBufferStub != nil {
		return fake.CreateBufferStub()
	} else {
		return fake.createBufferReturns.result1, fake.createBufferReturns.result2
	}
}

func (fake *FakeGraphicsClient) CreateBufferCallCount() int {
	fake.createBufferMutex.RLock()
	defer fake.createBufferMutex.RUnlock()
	return len(fake.createBufferArgsForCall)
}

func (fake *FakeGraphicsClient) CreateBufferReturns(result1 client.BufferId, result2 error) {
	fake.CreateBufferStub = nil
	fake.createBufferReturns = struct {
		result1 client.BufferId
		result2 error
	}{result1, result2}
}

func (fake *FakeGraphicsClient) BindVertexBuffer(id client.BufferId) error {
	fake.bindVertexBufferMutex.Lock()
	fake.bindVertexBufferArgsForCall = append(fake.bindVertexBufferArgsForCall, struct {
		id client.BufferId
	}{id})
	fake.bindVertexBufferMutex.Unlock()
	if fake.BindVertexBufferStub != nil {
		return fake.BindVertexBufferStub(id)
	} else {
		return fake.bindVertexBufferReturns.result1
	}
}

func (fake *FakeGraphicsClient) BindVertexBufferCallCount() int {
	fake.bindVertexBufferMutex.RLock()
	defer fake.bindVertexBufferMutex.RUnlock()
	return len(fake.bindVertexBufferArgsForCall)
}

func (fake *FakeGraphicsClient) BindVertexBufferArgsForCall(i int) client.BufferId {
	fake.bindVertexBufferMutex.RLock()
	defer fake.bindVertexBufferMutex.RUnlock()
	return fake.bindVertexBufferArgsForCall[i].id
}

func (fake *FakeGraphicsClient) BindVertexBufferReturns(result1 error) {
	fake.BindVertexBufferStub = nil
	fake.bindVertexBufferReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGraphicsClient) BindIndexBuffer(id client.BufferId) error {
	fake.bindIndexBufferMutex.Lock()
	fake.bindIndexBufferArgsForCall = append(fake.bindIndexBufferArgsForCall, struct {
		id client.BufferId
	}{id})
	fake.bindIndexBufferMutex.Unlock()
	if fake.BindIndexBufferStub != nil {
		return fake.BindIndexBufferStub(id)
	} else {
		return fake.bindIndexBufferReturns.result1
	}
}

func (fake *FakeGraphicsClient) BindIndexBufferCallCount() int {
	fake.bindIndexBufferMutex.RLock()
	defer fake.bindIndexBufferMutex.RUnlock()
	return len(fake.bindIndexBufferArgsForCall)
}

func (fake *FakeGraphicsClient) BindIndexBufferArgsForCall(i int) client.BufferId {
	fake.bindIndexBufferMutex.RLock()
	defer fake.bindIndexBufferMutex.RUnlock()
	return fake.bindIndexBufferArgsForCall[i].id
}

func (fake *FakeGraphicsClient) BindIndexBufferReturns(result1 error) {
	fake.BindIndexBufferStub = nil
	fake.bindIndexBufferReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGraphicsClient) CreateVertexBufferData(data []byte, usage client.BufferUsage) error {
	fake.createVertexBufferDataMutex.Lock()
	fake.createVertexBufferDataArgsForCall = append(fake.createVertexBufferDataArgsForCall, struct {
		data  []byte
		usage client.BufferUsage
	}{data, usage})
	fake.createVertexBufferDataMutex.Unlock()
	if fake.CreateVertexBufferDataStub != nil {
		return fake.CreateVertexBufferDataStub(data, usage)
	} else {
		return fake.createVertexBufferDataReturns.result1
	}
}

func (fake *FakeGraphicsClient) CreateVertexBufferDataCallCount() int {
	fake.createVertexBufferDataMutex.RLock()
	defer fake.createVertexBufferDataMutex.RUnlock()
	return len(fake.createVertexBufferDataArgsForCall)
}

func (fake *FakeGraphicsClient) CreateVertexBufferDataArgsForCall(i int) ([]byte, client.BufferUsage) {
	fake.createVertexBufferDataMutex.RLock()
	defer fake.createVertexBufferDataMutex.RUnlock()
	return fake.createVertexBufferDataArgsForCall[i].data, fake.createVertexBufferDataArgsForCall[i].usage
}

func (fake *FakeGraphicsClient) CreateVertexBufferDataReturns(result1 error) {
	fake.CreateVertexBufferDataStub = nil
	fake.createVertexBufferDataReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGraphicsClient) CreateIndexBufferData(data []byte, usage client.BufferUsage) error {
	fake.createIndexBufferDataMutex.Lock()
	fake.createIndexBufferDataArgsForCall = append(fake.createIndexBufferDataArgsForCall, struct {
		data  []byte
		usage client.BufferUsage
	}{data, usage})
	fake.createIndexBufferDataMutex.Unlock()
	if fake.CreateIndexBufferDataStub != nil {
		return fake.CreateIndexBufferDataStub(data, usage)
	} else {
		return fake.createIndexBufferDataReturns.result1
	}
}

func (fake *FakeGraphicsClient) CreateIndexBufferDataCallCount() int {
	fake.createIndexBufferDataMutex.RLock()
	defer fake.createIndexBufferDataMutex.RUnlock()
	return len(fake.createIndexBufferDataArgsForCall)
}

func (fake *FakeGraphicsClient) CreateIndexBufferDataArgsForCall(i int) ([]byte, client.BufferUsage) {
	fake.createIndexBufferDataMutex.RLock()
	defer fake.createIndexBufferDataMutex.RUnlock()
	return fake.createIndexBufferDataArgsForCall[i].data, fake.createIndexBufferDataArgsForCall[i].usage
}

func (fake *FakeGraphicsClient) CreateIndexBufferDataReturns(result1 error) {
	fake.CreateIndexBufferDataStub = nil
	fake.createIndexBufferDataReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGraphicsClient) DeleteBuffer(bufferId client.BufferId) error {
	fake.deleteBufferMutex.Lock()
	fake.deleteBufferArgsForCall = append(fake.deleteBufferArgsForCall, struct {
		bufferId client.BufferId
	}{bufferId})
	fake.deleteBufferMutex.Unlock()
	if fake.DeleteBufferStub != nil {
		return fake.DeleteBufferStub(bufferId)
	} else {
		return fake.deleteBufferReturns.result1
	}
}

func (fake *FakeGraphicsClient) DeleteBufferCallCount() int {
	fake.deleteBufferMutex.RLock()
	defer fake.deleteBufferMutex.RUnlock()
	return len(fake.deleteBufferArgsForCall)
}

func (fake *FakeGraphicsClient) DeleteBufferArgsForCall(i int) client.BufferId {
	fake.deleteBufferMutex.RLock()
	defer fake.deleteBufferMutex.RUnlock()
	return fake.deleteBufferArgsForCall[i].bufferId
}

func (fake *FakeGraphicsClient) DeleteBufferReturns(result1 error) {
	fake.DeleteBufferStub = nil
	fake.deleteBufferReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGraphicsClient) EnableAttribute(location client.AttributeLocation) error {
	fake.enableAttributeMutex.Lock()
	fake.enableAttributeArgsForCall = append(fake.enableAttributeArgsForCall, struct {
		location client.AttributeLocation
	}{location})
	fake.enableAttributeMutex.Unlock()
	if fake.EnableAttributeStub != nil {
		return fake.EnableAttributeStub(location)
	} else {
		return fake.enableAttributeReturns.result1
	}
}

func (fake *FakeGraphicsClient) EnableAttributeCallCount() int {
	fake.enableAttributeMutex.RLock()
	defer fake.enableAttributeMutex.RUnlock()
	return len(fake.enableAttributeArgsForCall)
}

func (fake *FakeGraphicsClient) EnableAttributeArgsForCall(i int) client.AttributeLocation {
	fake.enableAttributeMutex.RLock()
	defer fake.enableAttributeMutex.RUnlock()
	return fake.enableAttributeArgsForCall[i].location
}

func (fake *FakeGraphicsClient) EnableAttributeReturns(result1 error) {
	fake.EnableAttributeStub = nil
	fake.enableAttributeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGraphicsClient) DisableAttribute(location client.AttributeLocation) error {
	fake.disableAttributeMutex.Lock()
	fake.disableAttributeArgsForCall = append(fake.disableAttributeArgsForCall, struct {
		location client.AttributeLocation
	}{location})
	fake.disableAttributeMutex.Unlock()
	if fake.DisableAttributeStub != nil {
		return fake.DisableAttributeStub(location)
	} else {
		return fake.disableAttributeReturns.result1
	}
}

func (fake *FakeGraphicsClient) DisableAttributeCallCount() int {
	fake.disableAttributeMutex.RLock()
	defer fake.disableAttributeMutex.RUnlock()
	return len(fake.disableAttributeArgsForCall)
}

func (fake *FakeGraphicsClient) DisableAttributeArgsForCall(i int) client.AttributeLocation {
	fake.disableAttributeMutex.RLock()
	defer fake.disableAttributeMutex.RUnlock()
	return fake.disableAttributeArgsForCall[i].location
}

func (fake *FakeGraphicsClient) DisableAttributeReturns(result1 error) {
	fake.DisableAttributeStub = nil
	fake.disableAttributeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGraphicsClient) ConfigureAttribute(location client.AttributeLocation, components int, strideInBytes int, offsetInBytes int) error {
	fake.configureAttributeMutex.Lock()
	fake.configureAttributeArgsForCall = append(fake.configureAttributeArgsForCall, struct {
		location      client.AttributeLocation
		components    int
		strideInBytes int
		offsetInBytes int
	}{location, components, strideInBytes, offsetInBytes})
	fake.configureAttributeMutex.Unlock()
	if fake.ConfigureAttributeStub != nil {
		return fake.ConfigureAttributeStub(location, components, strideInBytes, offsetInBytes)
	} else {
		return fake.configureAttributeReturns.result1
	}
}

func (fake *FakeGraphicsClient) ConfigureAttributeCallCount() int {
	fake.configureAttributeMutex.RLock()
	defer fake.configureAttributeMutex.RUnlock()
	return len(fake.configureAttributeArgsForCall)
}

func (fake *FakeGraphicsClient) ConfigureAttributeArgsForCall(i int) (client.AttributeLocation, int, int, int) {
	fake.configureAttributeMutex.RLock()
	defer fake.configureAttributeMutex.RUnlock()
	return fake.configureAttributeArgsForCall[i].location, fake.configureAttributeArgsForCall[i].components, fake.configureAttributeArgsForCall[i].strideInBytes, fake.configureAttributeArgsForCall[i].offsetInBytes
}

func (fake *FakeGraphicsClient) ConfigureAttributeReturns(result1 error) {
	fake.ConfigureAttributeStub = nil
	fake.configureAttributeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGraphicsClient) SetVec4Uniform(arg1 client.UniformLocation, arg2 []float32) error {
	fake.setVec4UniformMutex.Lock()
	fake.setVec4UniformArgsForCall = append(fake.setVec4UniformArgsForCall, struct {
		arg1 client.UniformLocation
		arg2 []float32
	}{arg1, arg2})
	fake.setVec4UniformMutex.Unlock()
	if fake.SetVec4UniformStub != nil {
		return fake.SetVec4UniformStub(arg1, arg2)
	} else {
		return fake.setVec4UniformReturns.result1
	}
}

func (fake *FakeGraphicsClient) SetVec4UniformCallCount() int {
	fake.setVec4UniformMutex.RLock()
	defer fake.setVec4UniformMutex.RUnlock()
	return len(fake.setVec4UniformArgsForCall)
}

func (fake *FakeGraphicsClient) SetVec4UniformArgsForCall(i int) (client.UniformLocation, []float32) {
	fake.setVec4UniformMutex.RLock()
	defer fake.setVec4UniformMutex.RUnlock()
	return fake.setVec4UniformArgsForCall[i].arg1, fake.setVec4UniformArgsForCall[i].arg2
}

func (fake *FakeGraphicsClient) SetVec4UniformReturns(result1 error) {
	fake.SetVec4UniformStub = nil
	fake.setVec4UniformReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGraphicsClient) SetMat4x4Uniform(arg1 client.UniformLocation, arg2 []float32) error {
	fake.setMat4x4UniformMutex.Lock()
	fake.setMat4x4UniformArgsForCall = append(fake.setMat4x4UniformArgsForCall, struct {
		arg1 client.UniformLocation
		arg2 []float32
	}{arg1, arg2})
	fake.setMat4x4UniformMutex.Unlock()
	if fake.SetMat4x4UniformStub != nil {
		return fake.SetMat4x4UniformStub(arg1, arg2)
	} else {
		return fake.setMat4x4UniformReturns.result1
	}
}

func (fake *FakeGraphicsClient) SetMat4x4UniformCallCount() int {
	fake.setMat4x4UniformMutex.RLock()
	defer fake.setMat4x4UniformMutex.RUnlock()
	return len(fake.setMat4x4UniformArgsForCall)
}

func (fake *FakeGraphicsClient) SetMat4x4UniformArgsForCall(i int) (client.UniformLocation, []float32) {
	fake.setMat4x4UniformMutex.RLock()
	defer fake.setMat4x4UniformMutex.RUnlock()
	return fake.setMat4x4UniformArgsForCall[i].arg1, fake.setMat4x4UniformArgsForCall[i].arg2
}

func (fake *FakeGraphicsClient) SetMat4x4UniformReturns(result1 error) {
	fake.SetMat4x4UniformStub = nil
	fake.setMat4x4UniformReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGraphicsClient) SetSamplerUniform(arg1 client.UniformLocation, arg2 int) error {
	fake.setSamplerUniformMutex.Lock()
	fake.setSamplerUniformArgsForCall = append(fake.setSamplerUniformArgsForCall, struct {
		arg1 client.UniformLocation
		arg2 int
	}{arg1, arg2})
	fake.setSamplerUniformMutex.Unlock()
	if fake.SetSamplerUniformStub != nil {
		return fake.SetSamplerUniformStub(arg1, arg2)
	} else {
		return fake.setSamplerUniformReturns.result1
	}
}

func (fake *FakeGraphicsClient) SetSamplerUniformCallCount() int {
	fake.setSamplerUniformMutex.RLock()
	defer fake.setSamplerUniformMutex.RUnlock()
	return len(fake.setSamplerUniformArgsForCall)
}

func (fake *FakeGraphicsClient) SetSamplerUniformArgsForCall(i int) (client.UniformLocation, int) {
	fake.setSamplerUniformMutex.RLock()
	defer fake.setSamplerUniformMutex.RUnlock()
	return fake.setSamplerUniformArgsForCall[i].arg1, fake.setSamplerUniformArgsForCall[i].arg2
}

func (fake *FakeGraphicsClient) SetSamplerUniformReturns(result1 error) {
	fake.SetSamplerUniformStub = nil
	fake.setSamplerUniformReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGraphicsClient) Bind2DTexture(channel int, textureId client.TextureId) error {
	fake.bind2DTextureMutex.Lock()
	fake.bind2DTextureArgsForCall = append(fake.bind2DTextureArgsForCall, struct {
		channel   int
		textureId client.TextureId
	}{channel, textureId})
	fake.bind2DTextureMutex.Unlock()
	if fake.Bind2DTextureStub != nil {
		return fake.Bind2DTextureStub(channel, textureId)
	} else {
		return fake.bind2DTextureReturns.result1
	}
}

func (fake *FakeGraphicsClient) Bind2DTextureCallCount() int {
	fake.bind2DTextureMutex.RLock()
	defer fake.bind2DTextureMutex.RUnlock()
	return len(fake.bind2DTextureArgsForCall)
}

func (fake *FakeGraphicsClient) Bind2DTextureArgsForCall(i int) (int, client.TextureId) {
	fake.bind2DTextureMutex.RLock()
	defer fake.bind2DTextureMutex.RUnlock()
	return fake.bind2DTextureArgsForCall[i].channel, fake.bind2DTextureArgsForCall[i].textureId
}

func (fake *FakeGraphicsClient) Bind2DTextureReturns(result1 error) {
	fake.Bind2DTextureStub = nil
	fake.bind2DTextureReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGraphicsClient) BindCubeTexture(channel int, textureId client.TextureId) error {
	fake.bindCubeTextureMutex.Lock()
	fake.bindCubeTextureArgsForCall = append(fake.bindCubeTextureArgsForCall, struct {
		channel   int
		textureId client.TextureId
	}{channel, textureId})
	fake.bindCubeTextureMutex.Unlock()
	if fake.BindCubeTextureStub != nil {
		return fake.BindCubeTextureStub(channel, textureId)
	} else {
		return fake.bindCubeTextureReturns.result1
	}
}

func (fake *FakeGraphicsClient) BindCubeTextureCallCount() int {
	fake.bindCubeTextureMutex.RLock()
	defer fake.bindCubeTextureMutex.RUnlock()
	return len(fake.bindCubeTextureArgsForCall)
}

func (fake *FakeGraphicsClient) BindCubeTextureArgsForCall(i int) (int, client.TextureId) {
	fake.bindCubeTextureMutex.RLock()
	defer fake.bindCubeTextureMutex.RUnlock()
	return fake.bindCubeTextureArgsForCall[i].channel, fake.bindCubeTextureArgsForCall[i].textureId
}

func (fake *FakeGraphicsClient) BindCubeTextureReturns(result1 error) {
	fake.BindCubeTextureStub = nil
	fake.bindCubeTextureReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGraphicsClient) DrawTriangles(indexCount int, indexOffsetInBytes int) error {
	fake.drawTrianglesMutex.Lock()
	fake.drawTrianglesArgsForCall = append(fake.drawTrianglesArgsForCall, struct {
		indexCount         int
		indexOffsetInBytes int
	}{indexCount, indexOffsetInBytes})
	fake.drawTrianglesMutex.Unlock()
	if fake.DrawTrianglesStub != nil {
		return fake.DrawTrianglesStub(indexCount, indexOffsetInBytes)
	} else {
		return fake.drawTrianglesReturns.result1
	}
}

func (fake *FakeGraphicsClient) DrawTrianglesCallCount() int {
	fake.drawTrianglesMutex.RLock()
	defer fake.drawTrianglesMutex.RUnlock()
	return len(fake.drawTrianglesArgsForCall)
}

func (fake *FakeGraphicsClient) DrawTrianglesArgsForCall(i int) (int, int) {
	fake.drawTrianglesMutex.RLock()
	defer fake.drawTrianglesMutex.RUnlock()
	return fake.drawTrianglesArgsForCall[i].indexCount, fake.drawTrianglesArgsForCall[i].indexOffsetInBytes
}

func (fake *FakeGraphicsClient) DrawTrianglesReturns(result1 error) {
	fake.DrawTrianglesStub = nil
	fake.drawTrianglesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGraphicsClient) DrawLines(indexCount int, indexOffsetInBytes int) error {
	fake.drawLinesMutex.Lock()
	fake.drawLinesArgsForCall = append(fake.drawLinesArgsForCall, struct {
		indexCount         int
		indexOffsetInBytes int
	}{indexCount, indexOffsetInBytes})
	fake.drawLinesMutex.Unlock()
	if fake.DrawLinesStub != nil {
		return fake.DrawLinesStub(indexCount, indexOffsetInBytes)
	} else {
		return fake.drawLinesReturns.result1
	}
}

func (fake *FakeGraphicsClient) DrawLinesCallCount() int {
	fake.drawLinesMutex.RLock()
	defer fake.drawLinesMutex.RUnlock()
	return len(fake.drawLinesArgsForCall)
}

func (fake *FakeGraphicsClient) DrawLinesArgsForCall(i int) (int, int) {
	fake.drawLinesMutex.RLock()
	defer fake.drawLinesMutex.RUnlock()
	return fake.drawLinesArgsForCall[i].indexCount, fake.drawLinesArgsForCall[i].indexOffsetInBytes
}

func (fake *FakeGraphicsClient) DrawLinesReturns(result1 error) {
	fake.DrawLinesStub = nil
	fake.drawLinesReturns = struct {
		result1 error
	}{result1}
}

var _ client.GraphicsClient = new(FakeGraphicsClient)
